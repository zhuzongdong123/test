// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Project.pb

#include "Project.pb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_Project_2epb::google::protobuf::internal::SCCInfo<0> scc_info_Data1d_Project_2epb;
extern PROTOBUF_INTERNAL_EXPORT_Project_2epb::google::protobuf::internal::SCCInfo<0> scc_info_Data3d_Project_2epb;
extern PROTOBUF_INTERNAL_EXPORT_Project_2epb::google::protobuf::internal::SCCInfo<0> scc_info_ForwardModelingParaSetting_Project_2epb;
extern PROTOBUF_INTERNAL_EXPORT_Project_2epb::google::protobuf::internal::SCCInfo<0> scc_info_ModelingParam_Project_2epb;
extern PROTOBUF_INTERNAL_EXPORT_Project_2epb::google::protobuf::internal::SCCInfo<0> scc_info_ProjectBaseInfo_Project_2epb;
extern PROTOBUF_INTERNAL_EXPORT_Project_2epb::google::protobuf::internal::SCCInfo<0> scc_info_Vec2d_Project_2epb;
extern PROTOBUF_INTERNAL_EXPORT_Project_2epb::google::protobuf::internal::SCCInfo<0> scc_info_Vec3d_Project_2epb;
extern PROTOBUF_INTERNAL_EXPORT_Project_2epb::google::protobuf::internal::SCCInfo<1> scc_info_DataPreprocessInfo_Project_2epb;
extern PROTOBUF_INTERNAL_EXPORT_Project_2epb::google::protobuf::internal::SCCInfo<1> scc_info_ObservationSystemSetting_Project_2epb;
namespace pb
{
class Vec3dDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed<Vec3d> _instance;
} _Vec3d_default_instance_;
class Vec2dDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed<Vec2d> _instance;
} _Vec2d_default_instance_;
class Data1dDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed<Data1d> _instance;
} _Data1d_default_instance_;
class Data3dDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed<Data3d> _instance;
} _Data3d_default_instance_;
class ObservationSystemSettingDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed<ObservationSystemSetting> _instance;
} _ObservationSystemSetting_default_instance_;
class ForwardModelingParaSettingDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed<ForwardModelingParaSetting> _instance;
} _ForwardModelingParaSetting_default_instance_;
class DataPreprocessInfoDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed<DataPreprocessInfo> _instance;
} _DataPreprocessInfo_default_instance_;
class ModelingParamDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed<ModelingParam> _instance;
} _ModelingParam_default_instance_;
class ProjectBaseInfoDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed<ProjectBaseInfo> _instance;
} _ProjectBaseInfo_default_instance_;
class ProjectInfoDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed<ProjectInfo> _instance;
} _ProjectInfo_default_instance_;
} // namespace pb
static void InitDefaultsVec3d_Project_2epb()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::pb::_Vec3d_default_instance_;
        new (ptr)::pb::Vec3d();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::pb::Vec3d::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Vec3d_Project_2epb =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVec3d_Project_2epb}, {}};

static void InitDefaultsVec2d_Project_2epb()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::pb::_Vec2d_default_instance_;
        new (ptr)::pb::Vec2d();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::pb::Vec2d::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Vec2d_Project_2epb =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVec2d_Project_2epb}, {}};

static void InitDefaultsData1d_Project_2epb()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::pb::_Data1d_default_instance_;
        new (ptr)::pb::Data1d();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::pb::Data1d::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Data1d_Project_2epb =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsData1d_Project_2epb}, {}};

static void InitDefaultsData3d_Project_2epb()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::pb::_Data3d_default_instance_;
        new (ptr)::pb::Data3d();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::pb::Data3d::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Data3d_Project_2epb =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsData3d_Project_2epb}, {}};

static void InitDefaultsObservationSystemSetting_Project_2epb()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::pb::_ObservationSystemSetting_default_instance_;
        new (ptr)::pb::ObservationSystemSetting();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::pb::ObservationSystemSetting::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ObservationSystemSetting_Project_2epb =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsObservationSystemSetting_Project_2epb}, {
                                                                                                                                             &scc_info_Vec3d_Project_2epb.base,
                                                                                                                                         }};

static void InitDefaultsForwardModelingParaSetting_Project_2epb()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::pb::_ForwardModelingParaSetting_default_instance_;
        new (ptr)::pb::ForwardModelingParaSetting();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::pb::ForwardModelingParaSetting::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ForwardModelingParaSetting_Project_2epb =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsForwardModelingParaSetting_Project_2epb}, {}};

static void InitDefaultsDataPreprocessInfo_Project_2epb()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::pb::_DataPreprocessInfo_default_instance_;
        new (ptr)::pb::DataPreprocessInfo();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::pb::DataPreprocessInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DataPreprocessInfo_Project_2epb =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDataPreprocessInfo_Project_2epb}, {
                                                                                                                                       &scc_info_Data1d_Project_2epb.base,
                                                                                                                                   }};

static void InitDefaultsModelingParam_Project_2epb()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::pb::_ModelingParam_default_instance_;
        new (ptr)::pb::ModelingParam();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::pb::ModelingParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ModelingParam_Project_2epb =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsModelingParam_Project_2epb}, {}};

static void InitDefaultsProjectBaseInfo_Project_2epb()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::pb::_ProjectBaseInfo_default_instance_;
        new (ptr)::pb::ProjectBaseInfo();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::pb::ProjectBaseInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProjectBaseInfo_Project_2epb =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProjectBaseInfo_Project_2epb}, {}};

static void InitDefaultsProjectInfo_Project_2epb()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::pb::_ProjectInfo_default_instance_;
        new (ptr)::pb::ProjectInfo();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::pb::ProjectInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_ProjectInfo_Project_2epb =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsProjectInfo_Project_2epb}, {
                                                                                                                                &scc_info_ProjectBaseInfo_Project_2epb.base, &scc_info_ObservationSystemSetting_Project_2epb.base, &scc_info_DataPreprocessInfo_Project_2epb.base, &scc_info_ModelingParam_Project_2epb.base, &scc_info_Data3d_Project_2epb.base, &scc_info_Vec2d_Project_2epb.base, &scc_info_ForwardModelingParaSetting_Project_2epb.base,
                                                                                                                            }};

void InitDefaults_Project_2epb()
{
    ::google::protobuf::internal::InitSCC(&scc_info_Vec3d_Project_2epb.base);
    ::google::protobuf::internal::InitSCC(&scc_info_Vec2d_Project_2epb.base);
    ::google::protobuf::internal::InitSCC(&scc_info_Data1d_Project_2epb.base);
    ::google::protobuf::internal::InitSCC(&scc_info_Data3d_Project_2epb.base);
    ::google::protobuf::internal::InitSCC(&scc_info_ObservationSystemSetting_Project_2epb.base);
    ::google::protobuf::internal::InitSCC(&scc_info_ForwardModelingParaSetting_Project_2epb.base);
    ::google::protobuf::internal::InitSCC(&scc_info_DataPreprocessInfo_Project_2epb.base);
    ::google::protobuf::internal::InitSCC(&scc_info_ModelingParam_Project_2epb.base);
    ::google::protobuf::internal::InitSCC(&scc_info_ProjectBaseInfo_Project_2epb.base);
    ::google::protobuf::internal::InitSCC(&scc_info_ProjectInfo_Project_2epb.base);
}

::google::protobuf::Metadata file_level_metadata_Project_2epb[10];
const ::google::protobuf::EnumDescriptor *file_level_enum_descriptors_Project_2epb[3];
constexpr ::google::protobuf::ServiceDescriptor const **file_level_service_descriptors_Project_2epb = nullptr;

const ::google::protobuf::uint32 TableStruct_Project_2epb::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb::Vec3d, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::pb::Vec3d, x_),
    PROTOBUF_FIELD_OFFSET(::pb::Vec3d, y_),
    PROTOBUF_FIELD_OFFSET(::pb::Vec3d, z_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb::Vec2d, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::pb::Vec2d, x_),
    PROTOBUF_FIELD_OFFSET(::pb::Vec2d, y_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb::Data1d, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::pb::Data1d, data_),
    PROTOBUF_FIELD_OFFSET(::pb::Data1d, rows_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb::Data3d, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::pb::Data3d, data_),
    PROTOBUF_FIELD_OFFSET(::pb::Data3d, x_),
    PROTOBUF_FIELD_OFFSET(::pb::Data3d, y_),
    PROTOBUF_FIELD_OFFSET(::pb::Data3d, z_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb::ObservationSystemSetting, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::pb::ObservationSystemSetting, facewidth_),
    PROTOBUF_FIELD_OFFSET(::pb::ObservationSystemSetting, faceheight_),
    PROTOBUF_FIELD_OFFSET(::pb::ObservationSystemSetting, faceposition_),
    PROTOBUF_FIELD_OFFSET(::pb::ObservationSystemSetting, powersupplypointdata_),
    PROTOBUF_FIELD_OFFSET(::pb::ObservationSystemSetting, measuringpointdata_),
    PROTOBUF_FIELD_OFFSET(::pb::ObservationSystemSetting, eleccircledisvec_),
    PROTOBUF_FIELD_OFFSET(::pb::ObservationSystemSetting, devicetype_),
    PROTOBUF_FIELD_OFFSET(::pb::ObservationSystemSetting, mileagenumber_),
    PROTOBUF_FIELD_OFFSET(::pb::ObservationSystemSetting, excavationdir_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb::ForwardModelingParaSetting, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::pb::ForwardModelingParaSetting, potentialdeviceselectionswitch_),
    PROTOBUF_FIELD_OFFSET(::pb::ForwardModelingParaSetting, currentinumx_),
    PROTOBUF_FIELD_OFFSET(::pb::ForwardModelingParaSetting, currentinumy_),
    PROTOBUF_FIELD_OFFSET(::pb::ForwardModelingParaSetting, currentinumz_),
    PROTOBUF_FIELD_OFFSET(::pb::ForwardModelingParaSetting, ii_),
    PROTOBUF_FIELD_OFFSET(::pb::ForwardModelingParaSetting, cii_),
    PROTOBUF_FIELD_OFFSET(::pb::ForwardModelingParaSetting, sgm0value_),
    PROTOBUF_FIELD_OFFSET(::pb::ForwardModelingParaSetting, inverx1_),
    PROTOBUF_FIELD_OFFSET(::pb::ForwardModelingParaSetting, inverx2_),
    PROTOBUF_FIELD_OFFSET(::pb::ForwardModelingParaSetting, invery1_),
    PROTOBUF_FIELD_OFFSET(::pb::ForwardModelingParaSetting, invery2_),
    PROTOBUF_FIELD_OFFSET(::pb::ForwardModelingParaSetting, inverz1_),
    PROTOBUF_FIELD_OFFSET(::pb::ForwardModelingParaSetting, inverz2_),
    PROTOBUF_FIELD_OFFSET(::pb::ForwardModelingParaSetting, actual_begin_x_),
    PROTOBUF_FIELD_OFFSET(::pb::ForwardModelingParaSetting, actual_end_x_),
    PROTOBUF_FIELD_OFFSET(::pb::ForwardModelingParaSetting, actual_begin_y_),
    PROTOBUF_FIELD_OFFSET(::pb::ForwardModelingParaSetting, actual_end_y_),
    PROTOBUF_FIELD_OFFSET(::pb::ForwardModelingParaSetting, actual_begin_z_),
    PROTOBUF_FIELD_OFFSET(::pb::ForwardModelingParaSetting, actual_end_z_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb::DataPreprocessInfo, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::pb::DataPreprocessInfo, badpoints_),
    PROTOBUF_FIELD_OFFSET(::pb::DataPreprocessInfo, observedatalist_),
    PROTOBUF_FIELD_OFFSET(::pb::DataPreprocessInfo, adjustmentdatavec_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb::ModelingParam, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::pb::ModelingParam, forecastlength_),
    PROTOBUF_FIELD_OFFSET(::pb::ModelingParam, predictioncellspacing_),
    PROTOBUF_FIELD_OFFSET(::pb::ModelingParam, tunnelcavityrangex_),
    PROTOBUF_FIELD_OFFSET(::pb::ModelingParam, tunnelcavityrangey_),
    PROTOBUF_FIELD_OFFSET(::pb::ModelingParam, inversionarearangex_),
    PROTOBUF_FIELD_OFFSET(::pb::ModelingParam, inversionarearangey_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb::ProjectBaseInfo, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::pb::ProjectBaseInfo, projectname_),
    PROTOBUF_FIELD_OFFSET(::pb::ProjectBaseInfo, projectversion_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb::ProjectInfo, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::pb::ProjectInfo, projectbaseinfo_),
    PROTOBUF_FIELD_OFFSET(::pb::ProjectInfo, obsystemsetting_),
    PROTOBUF_FIELD_OFFSET(::pb::ProjectInfo, datapreprocess_),
    PROTOBUF_FIELD_OFFSET(::pb::ProjectInfo, modelingparam_),
    PROTOBUF_FIELD_OFFSET(::pb::ProjectInfo, inversionprocessresult_),
    PROTOBUF_FIELD_OFFSET(::pb::ProjectInfo, halflifecurvedatalist_),
    PROTOBUF_FIELD_OFFSET(::pb::ProjectInfo, simforwardparams_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    {0, -1, sizeof(::pb::Vec3d)},
    {8, -1, sizeof(::pb::Vec2d)},
    {15, -1, sizeof(::pb::Data1d)},
    {22, -1, sizeof(::pb::Data3d)},
    {31, -1, sizeof(::pb::ObservationSystemSetting)},
    {45, -1, sizeof(::pb::ForwardModelingParaSetting)},
    {69, -1, sizeof(::pb::DataPreprocessInfo)},
    {77, -1, sizeof(::pb::ModelingParam)},
    {88, -1, sizeof(::pb::ProjectBaseInfo)},
    {95, -1, sizeof(::pb::ProjectInfo)},
};

static ::google::protobuf::Message const *const file_default_instances[] = {
    reinterpret_cast<const ::google::protobuf::Message *>(&::pb::_Vec3d_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(&::pb::_Vec2d_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(&::pb::_Data1d_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(&::pb::_Data3d_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(&::pb::_ObservationSystemSetting_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(&::pb::_ForwardModelingParaSetting_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(&::pb::_DataPreprocessInfo_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(&::pb::_ModelingParam_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(&::pb::_ProjectBaseInfo_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(&::pb::_ProjectInfo_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_Project_2epb = {
    {}, AddDescriptors_Project_2epb, "Project.pb", schemas, file_default_instances, TableStruct_Project_2epb::offsets, file_level_metadata_Project_2epb, 10, file_level_enum_descriptors_Project_2epb, file_level_service_descriptors_Project_2epb,
};

const char descriptor_table_protodef_Project_2epb[] =
    "\n\nProject.pb\022\002pb\"(\n\005Vec3d\022\t\n\001x\030\001 \001(\001\022\t\n\001"
    "y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"\035\n\005Vec2d\022\t\n\001x\030\001 \001(\001\022\t"
    "\n\001y\030\002 \001(\001\"$\n\006Data1d\022\014\n\004data\030\001 \003(\001\022\014\n\004row"
    "s\030\002 \001(\r\"7\n\006Data3d\022\014\n\004data\030\001 \003(\001\022\t\n\001x\030\002 \001"
    "(\r\022\t\n\001y\030\003 \001(\r\022\t\n\001z\030\004 \001(\r\"\261\002\n\030Observation"
    "SystemSetting\022\021\n\tfaceWidth\030\001 \001(\002\022\022\n\nface"
    "Height\030\002 \001(\002\022\037\n\014facePosition\030\003 \001(\0132\t.pb."
    "Vec3d\022\'\n\024powerSupplyPointData\030\004 \003(\0132\t.pb"
    ".Vec3d\022%\n\022measuringPointData\030\005 \003(\0132\t.pb."
    "Vec3d\022\030\n\020elecCircleDisVec\030\006 \003(\002\022\"\n\ndevic"
    "eType\030\007 \001(\0162\016.pb.DeviceType\022\025\n\rmileageNu"
    "mber\030\010 \001(\t\022(\n\rexcavationDir\030\t \001(\0162\021.pb.E"
    "xcavationDir\"\306\003\n\032ForwardModelingParaSett"
    "ing\022J\n\036potentialDeviceSelectionSwitch\030\001 "
    "\001(\0162\".pb.PotentialDeviceSelectionSwitch\022"
    "\024\n\014currentINumX\030\002 \001(\r\022\024\n\014currentINumY\030\003 "
    "\001(\r\022\024\n\014currentINumZ\030\004 \001(\r\022\n\n\002II\030\005 \001(\001\022\013\n"
    "\003CII\030\006 \001(\001\022\021\n\tsgM0Value\030\007 \001(\001\022\017\n\007inverX1"
    "\030\010 \001(\r\022\017\n\007inverX2\030\t \001(\r\022\017\n\007inverY1\030\n \001(\r"
    "\022\017\n\007inverY2\030\013 \001(\r\022\017\n\007inverZ1\030\014 \001(\r\022\017\n\007in"
    "verZ2\030\r \001(\r\022\026\n\016actual_begin_x\030\016 \001(\002\022\024\n\014a"
    "ctual_end_x\030\017 \001(\002\022\026\n\016actual_begin_y\030\020 \001("
    "\002\022\024\n\014actual_end_y\030\021 \001(\002\022\026\n\016actual_begin_"
    "z\030\022 \001(\002\022\024\n\014actual_end_z\030\023 \001(\002\"g\n\022DataPre"
    "processInfo\022\035\n\tbadPoints\030\001 \001(\0132\n.pb.Data"
    "1d\022\027\n\017observeDataList\030\002 \003(\001\022\031\n\021adjustmen"
    "tDataVec\030\003 \003(\001\"\270\001\n\rModelingParam\022\026\n\016fore"
    "castLength\030\001 \001(\002\022\035\n\025predictionCellSpacin"
    "g\030\002 \001(\002\022\032\n\022tunnelCavityRangeX\030\003 \001(\002\022\032\n\022t"
    "unnelCavityRangeY\030\004 \001(\002\022\033\n\023inversionArea"
    "RangeX\030\005 \001(\002\022\033\n\023inversionAreaRangeY\030\006 \001("
    "\002\">\n\017ProjectBaseInfo\022\023\n\013projectName\030\001 \001("
    "\t\022\026\n\016projectVersion\030\002 \001(\t\"\334\002\n\013ProjectInf"
    "o\022,\n\017projectBaseInfo\030\001 \001(\0132\023.pb.ProjectB"
    "aseInfo\0225\n\017obSystemSetting\030\002 \001(\0132\034.pb.Ob"
    "servationSystemSetting\022.\n\016dataPreprocess"
    "\030\003 \001(\0132\026.pb.DataPreprocessInfo\022(\n\rmodeli"
    "ngParam\030\004 \001(\0132\021.pb.ModelingParam\022*\n\026inve"
    "rsionProcessResult\030\005 \001(\0132\n.pb.Data3d\022(\n\025"
    "halfLifeCurveDataList\030\006 \003(\0132\t.pb.Vec2d\0228"
    "\n\020simForwardParams\030\007 \001(\0132\036.pb.ForwardMod"
    "elingParaSetting*\246\001\n\nDeviceType\022\n\n\006NType"
    "1\020\000\022\n\n\006NType2\020\001\022\n\n\006NType3\020\002\022\n\n\006NType4\020\003\022"
    "\n\n\006NType5\020\004\022\n\n\006NType6\020\005\022\n\n\006NType7\020\006\022\n\n\006N"
    "Type8\020\007\022\n\n\006NType9\020\010\022\013\n\007NType10\020\t\022\t\n\005ESCA"
    "N\020\n\022\024\n\020FocusingSounding\020\013*<\n\036PotentialDe"
    "viceSelectionSwitch\022\020\n\014Schlumberger\020\000\022\010\n"
    "\004AMNB\020\001*4\n\rExcavationDir\022\022\n\016GreaterMilea"
    "ge\020\000\022\017\n\013LessMileage\020\001b\006proto3";
::google::protobuf::internal::DescriptorTable descriptor_table_Project_2epb = {
    false, InitDefaults_Project_2epb,
    descriptor_table_protodef_Project_2epb,
    "Project.pb", &assign_descriptors_table_Project_2epb, 1949,
};

void AddDescriptors_Project_2epb()
{
    static constexpr ::google::protobuf::internal::InitFunc deps[1] =
        {};
    ::google::protobuf::internal::AddDescriptors(&descriptor_table_Project_2epb, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Project_2epb = []()
{
    AddDescriptors_Project_2epb();
    return true;
}();
namespace pb
{
const ::google::protobuf::EnumDescriptor *DeviceType_descriptor()
{
    ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Project_2epb);
    return file_level_enum_descriptors_Project_2epb[0];
}
bool DeviceType_IsValid(int value)
{
    switch (value)
    {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
        return true;
    default:
        return false;
    }
}

const ::google::protobuf::EnumDescriptor *PotentialDeviceSelectionSwitch_descriptor()
{
    ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Project_2epb);
    return file_level_enum_descriptors_Project_2epb[1];
}
bool PotentialDeviceSelectionSwitch_IsValid(int value)
{
    switch (value)
    {
    case 0:
    case 1:
        return true;
    default:
        return false;
    }
}

const ::google::protobuf::EnumDescriptor *ExcavationDir_descriptor()
{
    ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Project_2epb);
    return file_level_enum_descriptors_Project_2epb[2];
}
bool ExcavationDir_IsValid(int value)
{
    switch (value)
    {
    case 0:
    case 1:
        return true;
    default:
        return false;
    }
}

// ===================================================================

void Vec3d::InitAsDefaultInstance()
{
}
class Vec3d::HasBitSetters
{
  public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vec3d::kXFieldNumber;
const int Vec3d::kYFieldNumber;
const int Vec3d::kZFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

Vec3d::Vec3d()
    : ::google::protobuf::Message(), _internal_metadata_(nullptr)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:pb.Vec3d)
}
Vec3d::Vec3d(const Vec3d &from)
    : ::google::protobuf::Message(),
      _internal_metadata_(nullptr)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&x_, &from.x_,
             static_cast<size_t>(reinterpret_cast<char *>(&z_) -
                                 reinterpret_cast<char *>(&x_)) +
                 sizeof(z_));
    // @@protoc_insertion_point(copy_constructor:pb.Vec3d)
}

void Vec3d::SharedCtor()
{
    ::memset(&x_, 0, static_cast<size_t>(
                         reinterpret_cast<char *>(&z_) -
                         reinterpret_cast<char *>(&x_)) +
                         sizeof(z_));
}

Vec3d::~Vec3d()
{
    // @@protoc_insertion_point(destructor:pb.Vec3d)
    SharedDtor();
}

void Vec3d::SharedDtor()
{
}

void Vec3d::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const Vec3d &Vec3d::default_instance()
{
    ::google::protobuf::internal::InitSCC(&::scc_info_Vec3d_Project_2epb.base);
    return *internal_default_instance();
}

void Vec3d::Clear()
{
    // @@protoc_insertion_point(message_clear_start:pb.Vec3d)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    ::memset(&x_, 0, static_cast<size_t>(
                         reinterpret_cast<char *>(&z_) -
                         reinterpret_cast<char *>(&x_)) +
                         sizeof(z_));
    _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char *Vec3d::_InternalParse(const char *begin, const char *end, void *object,
                                  ::google::protobuf::internal::ParseContext *ctx)
{
    auto msg = static_cast<Vec3d *>(object);
    ::google::protobuf::int32 size;
    (void)size;
    int depth;
    (void)depth;
    ::google::protobuf::uint32 tag;
    ::google::protobuf::internal::ParseFunc parser_till_end;
    (void)parser_till_end;
    auto ptr = begin;
    while (ptr < end)
    {
        ptr = ::google::protobuf::io::Parse32(ptr, &tag);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        switch (tag >> 3)
        {
        // double x = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 9)
                goto handle_unusual;
            msg->set_x(::google::protobuf::io::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            break;
        }
        // double y = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 17)
                goto handle_unusual;
            msg->set_y(::google::protobuf::io::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            break;
        }
        // double z = 3;
        case 3:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 25)
                goto handle_unusual;
            msg->set_z(::google::protobuf::io::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            break;
        }
        default:
        {
        handle_unusual:
            if ((tag & 7) == 4 || tag == 0)
            {
                ctx->EndGroup(tag);
                return ptr;
            }
            auto res = UnknownFieldParse(tag, {_InternalParse, msg},
                                         ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
            ptr = res.first;
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
            if (res.second)
                return ptr;
        }
        } // switch
    }     // while
    return ptr;
}
#else // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Vec3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input)
{
#define DO_(EXPRESSION)                     \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:pb.Vec3d)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // double x = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (9 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    input, &x_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // double y = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (17 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    input, &y_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // double z = 3;
        case 3:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (25 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    input, &z_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        default:
        {
        handle_unusual:
            if (tag == 0)
            {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                input, tag, _internal_metadata_.mutable_unknown_fields()));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:pb.Vec3d)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:pb.Vec3d)
    return false;
#undef DO_
}
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Vec3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const
{
    // @@protoc_insertion_point(serialize_start:pb.Vec3d)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // double x = 1;
    if (this->x() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
    }

    // double y = 2;
    if (this->y() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
    }

    // double z = 3;
    if (this->z() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:pb.Vec3d)
}

::google::protobuf::uint8 *Vec3d::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const
{
    // @@protoc_insertion_point(serialize_to_array_start:pb.Vec3d)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // double x = 1;
    if (this->x() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
    }

    // double y = 2;
    if (this->y() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
    }

    // double z = 3;
    if (this->z() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:pb.Vec3d)
    return target;
}

size_t Vec3d::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:pb.Vec3d)
    size_t total_size = 0;

    if (_internal_metadata_.have_unknown_fields())
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                _internal_metadata_.unknown_fields());
    }
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // double x = 1;
    if (this->x() != 0)
    {
        total_size += 1 + 8;
    }

    // double y = 2;
    if (this->y() != 0)
    {
        total_size += 1 + 8;
    }

    // double z = 3;
    if (this->z() != 0)
    {
        total_size += 1 + 8;
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Vec3d::MergeFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:pb.Vec3d)
    GOOGLE_DCHECK_NE(&from, this);
    const Vec3d *source =
        ::google::protobuf::DynamicCastToGenerated<Vec3d>(
            &from);
    if (source == nullptr)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Vec3d)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Vec3d)
        MergeFrom(*source);
    }
}

void Vec3d::MergeFrom(const Vec3d &from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:pb.Vec3d)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.x() != 0)
    {
        set_x(from.x());
    }
    if (from.y() != 0)
    {
        set_y(from.y());
    }
    if (from.z() != 0)
    {
        set_z(from.z());
    }
}

void Vec3d::CopyFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:pb.Vec3d)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void Vec3d::CopyFrom(const Vec3d &from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:pb.Vec3d)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Vec3d::IsInitialized() const
{
    return true;
}

void Vec3d::Swap(Vec3d *other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Vec3d::InternalSwap(Vec3d *other)
{
    using std::swap;
    _internal_metadata_.Swap(&other->_internal_metadata_);
    swap(x_, other->x_);
    swap(y_, other->y_);
    swap(z_, other->z_);
}

::google::protobuf::Metadata Vec3d::GetMetadata() const
{
    ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Project_2epb);
    return ::file_level_metadata_Project_2epb[kIndexInFileMessages];
}

// ===================================================================

void Vec2d::InitAsDefaultInstance()
{
}
class Vec2d::HasBitSetters
{
  public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vec2d::kXFieldNumber;
const int Vec2d::kYFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

Vec2d::Vec2d()
    : ::google::protobuf::Message(), _internal_metadata_(nullptr)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:pb.Vec2d)
}
Vec2d::Vec2d(const Vec2d &from)
    : ::google::protobuf::Message(),
      _internal_metadata_(nullptr)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&x_, &from.x_,
             static_cast<size_t>(reinterpret_cast<char *>(&y_) -
                                 reinterpret_cast<char *>(&x_)) +
                 sizeof(y_));
    // @@protoc_insertion_point(copy_constructor:pb.Vec2d)
}

void Vec2d::SharedCtor()
{
    ::memset(&x_, 0, static_cast<size_t>(
                         reinterpret_cast<char *>(&y_) -
                         reinterpret_cast<char *>(&x_)) +
                         sizeof(y_));
}

Vec2d::~Vec2d()
{
    // @@protoc_insertion_point(destructor:pb.Vec2d)
    SharedDtor();
}

void Vec2d::SharedDtor()
{
}

void Vec2d::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const Vec2d &Vec2d::default_instance()
{
    ::google::protobuf::internal::InitSCC(&::scc_info_Vec2d_Project_2epb.base);
    return *internal_default_instance();
}

void Vec2d::Clear()
{
    // @@protoc_insertion_point(message_clear_start:pb.Vec2d)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    ::memset(&x_, 0, static_cast<size_t>(
                         reinterpret_cast<char *>(&y_) -
                         reinterpret_cast<char *>(&x_)) +
                         sizeof(y_));
    _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char *Vec2d::_InternalParse(const char *begin, const char *end, void *object,
                                  ::google::protobuf::internal::ParseContext *ctx)
{
    auto msg = static_cast<Vec2d *>(object);
    ::google::protobuf::int32 size;
    (void)size;
    int depth;
    (void)depth;
    ::google::protobuf::uint32 tag;
    ::google::protobuf::internal::ParseFunc parser_till_end;
    (void)parser_till_end;
    auto ptr = begin;
    while (ptr < end)
    {
        ptr = ::google::protobuf::io::Parse32(ptr, &tag);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        switch (tag >> 3)
        {
        // double x = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 9)
                goto handle_unusual;
            msg->set_x(::google::protobuf::io::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            break;
        }
        // double y = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 17)
                goto handle_unusual;
            msg->set_y(::google::protobuf::io::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            break;
        }
        default:
        {
        handle_unusual:
            if ((tag & 7) == 4 || tag == 0)
            {
                ctx->EndGroup(tag);
                return ptr;
            }
            auto res = UnknownFieldParse(tag, {_InternalParse, msg},
                                         ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
            ptr = res.first;
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
            if (res.second)
                return ptr;
        }
        } // switch
    }     // while
    return ptr;
}
#else // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Vec2d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input)
{
#define DO_(EXPRESSION)                     \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:pb.Vec2d)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // double x = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (9 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    input, &x_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // double y = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (17 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    input, &y_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        default:
        {
        handle_unusual:
            if (tag == 0)
            {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                input, tag, _internal_metadata_.mutable_unknown_fields()));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:pb.Vec2d)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:pb.Vec2d)
    return false;
#undef DO_
}
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Vec2d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const
{
    // @@protoc_insertion_point(serialize_start:pb.Vec2d)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // double x = 1;
    if (this->x() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
    }

    // double y = 2;
    if (this->y() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:pb.Vec2d)
}

::google::protobuf::uint8 *Vec2d::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const
{
    // @@protoc_insertion_point(serialize_to_array_start:pb.Vec2d)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // double x = 1;
    if (this->x() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
    }

    // double y = 2;
    if (this->y() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:pb.Vec2d)
    return target;
}

size_t Vec2d::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:pb.Vec2d)
    size_t total_size = 0;

    if (_internal_metadata_.have_unknown_fields())
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                _internal_metadata_.unknown_fields());
    }
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // double x = 1;
    if (this->x() != 0)
    {
        total_size += 1 + 8;
    }

    // double y = 2;
    if (this->y() != 0)
    {
        total_size += 1 + 8;
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Vec2d::MergeFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:pb.Vec2d)
    GOOGLE_DCHECK_NE(&from, this);
    const Vec2d *source =
        ::google::protobuf::DynamicCastToGenerated<Vec2d>(
            &from);
    if (source == nullptr)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Vec2d)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Vec2d)
        MergeFrom(*source);
    }
}

void Vec2d::MergeFrom(const Vec2d &from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:pb.Vec2d)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.x() != 0)
    {
        set_x(from.x());
    }
    if (from.y() != 0)
    {
        set_y(from.y());
    }
}

void Vec2d::CopyFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:pb.Vec2d)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void Vec2d::CopyFrom(const Vec2d &from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:pb.Vec2d)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Vec2d::IsInitialized() const
{
    return true;
}

void Vec2d::Swap(Vec2d *other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Vec2d::InternalSwap(Vec2d *other)
{
    using std::swap;
    _internal_metadata_.Swap(&other->_internal_metadata_);
    swap(x_, other->x_);
    swap(y_, other->y_);
}

::google::protobuf::Metadata Vec2d::GetMetadata() const
{
    ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Project_2epb);
    return ::file_level_metadata_Project_2epb[kIndexInFileMessages];
}

// ===================================================================

void Data1d::InitAsDefaultInstance()
{
}
class Data1d::HasBitSetters
{
  public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Data1d::kDataFieldNumber;
const int Data1d::kRowsFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

Data1d::Data1d()
    : ::google::protobuf::Message(), _internal_metadata_(nullptr)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:pb.Data1d)
}
Data1d::Data1d(const Data1d &from)
    : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    rows_ = from.rows_;
    // @@protoc_insertion_point(copy_constructor:pb.Data1d)
}

void Data1d::SharedCtor()
{
    rows_ = 0u;
}

Data1d::~Data1d()
{
    // @@protoc_insertion_point(destructor:pb.Data1d)
    SharedDtor();
}

void Data1d::SharedDtor()
{
}

void Data1d::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const Data1d &Data1d::default_instance()
{
    ::google::protobuf::internal::InitSCC(&::scc_info_Data1d_Project_2epb.base);
    return *internal_default_instance();
}

void Data1d::Clear()
{
    // @@protoc_insertion_point(message_clear_start:pb.Data1d)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    data_.Clear();
    rows_ = 0u;
    _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char *Data1d::_InternalParse(const char *begin, const char *end, void *object,
                                   ::google::protobuf::internal::ParseContext *ctx)
{
    auto msg = static_cast<Data1d *>(object);
    ::google::protobuf::int32 size;
    (void)size;
    int depth;
    (void)depth;
    ::google::protobuf::uint32 tag;
    ::google::protobuf::internal::ParseFunc parser_till_end;
    (void)parser_till_end;
    auto ptr = begin;
    while (ptr < end)
    {
        ptr = ::google::protobuf::io::Parse32(ptr, &tag);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        switch (tag >> 3)
        {
        // repeated double data = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == 10)
            {
                ptr = ::google::protobuf::io::ReadSize(ptr, &size);
                GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
                parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
                object = msg->mutable_data();
                if (size > end - ptr)
                    goto len_delim_till_end;
                auto newend = ptr + size;
                if (size)
                    ptr = parser_till_end(ptr, newend, object, ctx);
                GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
                break;
            }
            else if (static_cast<::google::protobuf::uint8>(tag) != 9)
                goto handle_unusual;
            do
            {
                msg->add_data(::google::protobuf::io::UnalignedLoad<double>(ptr));
                ptr += sizeof(double);
                if (ptr >= end)
                    break;
            } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 9 && (ptr += 1));
            break;
        }
        // uint32 rows = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 16)
                goto handle_unusual;
            msg->set_rows(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            break;
        }
        default:
        {
        handle_unusual:
            if ((tag & 7) == 4 || tag == 0)
            {
                ctx->EndGroup(tag);
                return ptr;
            }
            auto res = UnknownFieldParse(tag, {_InternalParse, msg},
                                         ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
            ptr = res.first;
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
            if (res.second)
                return ptr;
        }
        } // switch
    }     // while
    return ptr;
len_delim_till_end:
    return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
}
#else // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Data1d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input)
{
#define DO_(EXPRESSION)                     \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:pb.Data1d)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // repeated double data = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (10 & 0xFF))
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                     double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    input, this->mutable_data())));
            }
            else if (static_cast<::google::protobuf::uint8>(tag) == (9 & 0xFF))
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                     double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    1, 10u, input, this->mutable_data())));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // uint32 rows = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (16 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &rows_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        default:
        {
        handle_unusual:
            if (tag == 0)
            {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                input, tag, _internal_metadata_.mutable_unknown_fields()));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:pb.Data1d)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:pb.Data1d)
    return false;
#undef DO_
}
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Data1d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const
{
    // @@protoc_insertion_point(serialize_start:pb.Data1d)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // repeated double data = 1;
    if (this->data_size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_data_cached_byte_size_.load(
            std::memory_order_relaxed));
        ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
            this->data().data(), this->data_size(), output);
    }

    // uint32 rows = 2;
    if (this->rows() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rows(), output);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:pb.Data1d)
}

::google::protobuf::uint8 *Data1d::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const
{
    // @@protoc_insertion_point(serialize_to_array_start:pb.Data1d)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // repeated double data = 1;
    if (this->data_size() > 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            1,
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
            target);
        target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
            _data_cached_byte_size_.load(std::memory_order_relaxed),
            target);
        target = ::google::protobuf::internal::WireFormatLite::
            WriteDoubleNoTagToArray(this->data_, target);
    }

    // uint32 rows = 2;
    if (this->rows() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rows(), target);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:pb.Data1d)
    return target;
}

size_t Data1d::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:pb.Data1d)
    size_t total_size = 0;

    if (_internal_metadata_.have_unknown_fields())
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                _internal_metadata_.unknown_fields());
    }
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // repeated double data = 1;
    {
        unsigned int count = static_cast<unsigned int>(this->data_size());
        size_t data_size = 8UL * count;
        if (data_size > 0)
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::Int32Size(
                              static_cast<::google::protobuf::int32>(data_size));
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        _data_cached_byte_size_.store(cached_size,
                                      std::memory_order_relaxed);
        total_size += data_size;
    }

    // uint32 rows = 2;
    if (this->rows() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::UInt32Size(
                          this->rows());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Data1d::MergeFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:pb.Data1d)
    GOOGLE_DCHECK_NE(&from, this);
    const Data1d *source =
        ::google::protobuf::DynamicCastToGenerated<Data1d>(
            &from);
    if (source == nullptr)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Data1d)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Data1d)
        MergeFrom(*source);
    }
}

void Data1d::MergeFrom(const Data1d &from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:pb.Data1d)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    data_.MergeFrom(from.data_);
    if (from.rows() != 0)
    {
        set_rows(from.rows());
    }
}

void Data1d::CopyFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:pb.Data1d)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void Data1d::CopyFrom(const Data1d &from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:pb.Data1d)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Data1d::IsInitialized() const
{
    return true;
}

void Data1d::Swap(Data1d *other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Data1d::InternalSwap(Data1d *other)
{
    using std::swap;
    _internal_metadata_.Swap(&other->_internal_metadata_);
    data_.InternalSwap(&other->data_);
    swap(rows_, other->rows_);
}

::google::protobuf::Metadata Data1d::GetMetadata() const
{
    ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Project_2epb);
    return ::file_level_metadata_Project_2epb[kIndexInFileMessages];
}

// ===================================================================

void Data3d::InitAsDefaultInstance()
{
}
class Data3d::HasBitSetters
{
  public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Data3d::kDataFieldNumber;
const int Data3d::kXFieldNumber;
const int Data3d::kYFieldNumber;
const int Data3d::kZFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

Data3d::Data3d()
    : ::google::protobuf::Message(), _internal_metadata_(nullptr)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:pb.Data3d)
}
Data3d::Data3d(const Data3d &from)
    : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&x_, &from.x_,
             static_cast<size_t>(reinterpret_cast<char *>(&z_) -
                                 reinterpret_cast<char *>(&x_)) +
                 sizeof(z_));
    // @@protoc_insertion_point(copy_constructor:pb.Data3d)
}

void Data3d::SharedCtor()
{
    ::memset(&x_, 0, static_cast<size_t>(
                         reinterpret_cast<char *>(&z_) -
                         reinterpret_cast<char *>(&x_)) +
                         sizeof(z_));
}

Data3d::~Data3d()
{
    // @@protoc_insertion_point(destructor:pb.Data3d)
    SharedDtor();
}

void Data3d::SharedDtor()
{
}

void Data3d::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const Data3d &Data3d::default_instance()
{
    ::google::protobuf::internal::InitSCC(&::scc_info_Data3d_Project_2epb.base);
    return *internal_default_instance();
}

void Data3d::Clear()
{
    // @@protoc_insertion_point(message_clear_start:pb.Data3d)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    data_.Clear();
    ::memset(&x_, 0, static_cast<size_t>(
                         reinterpret_cast<char *>(&z_) -
                         reinterpret_cast<char *>(&x_)) +
                         sizeof(z_));
    _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char *Data3d::_InternalParse(const char *begin, const char *end, void *object,
                                   ::google::protobuf::internal::ParseContext *ctx)
{
    auto msg = static_cast<Data3d *>(object);
    ::google::protobuf::int32 size;
    (void)size;
    int depth;
    (void)depth;
    ::google::protobuf::uint32 tag;
    ::google::protobuf::internal::ParseFunc parser_till_end;
    (void)parser_till_end;
    auto ptr = begin;
    while (ptr < end)
    {
        ptr = ::google::protobuf::io::Parse32(ptr, &tag);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        switch (tag >> 3)
        {
        // repeated double data = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == 10)
            {
                ptr = ::google::protobuf::io::ReadSize(ptr, &size);
                GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
                parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
                object = msg->mutable_data();
                if (size > end - ptr)
                    goto len_delim_till_end;
                auto newend = ptr + size;
                if (size)
                    ptr = parser_till_end(ptr, newend, object, ctx);
                GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
                break;
            }
            else if (static_cast<::google::protobuf::uint8>(tag) != 9)
                goto handle_unusual;
            do
            {
                msg->add_data(::google::protobuf::io::UnalignedLoad<double>(ptr));
                ptr += sizeof(double);
                if (ptr >= end)
                    break;
            } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 9 && (ptr += 1));
            break;
        }
        // uint32 x = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 16)
                goto handle_unusual;
            msg->set_x(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            break;
        }
        // uint32 y = 3;
        case 3:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 24)
                goto handle_unusual;
            msg->set_y(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            break;
        }
        // uint32 z = 4;
        case 4:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 32)
                goto handle_unusual;
            msg->set_z(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            break;
        }
        default:
        {
        handle_unusual:
            if ((tag & 7) == 4 || tag == 0)
            {
                ctx->EndGroup(tag);
                return ptr;
            }
            auto res = UnknownFieldParse(tag, {_InternalParse, msg},
                                         ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
            ptr = res.first;
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
            if (res.second)
                return ptr;
        }
        } // switch
    }     // while
    return ptr;
len_delim_till_end:
    return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
}
#else // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Data3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input)
{
#define DO_(EXPRESSION)                     \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:pb.Data3d)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // repeated double data = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (10 & 0xFF))
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                     double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    input, this->mutable_data())));
            }
            else if (static_cast<::google::protobuf::uint8>(tag) == (9 & 0xFF))
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                     double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    1, 10u, input, this->mutable_data())));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // uint32 x = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (16 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &x_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // uint32 y = 3;
        case 3:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (24 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &y_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // uint32 z = 4;
        case 4:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (32 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &z_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        default:
        {
        handle_unusual:
            if (tag == 0)
            {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                input, tag, _internal_metadata_.mutable_unknown_fields()));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:pb.Data3d)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:pb.Data3d)
    return false;
#undef DO_
}
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Data3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const
{
    // @@protoc_insertion_point(serialize_start:pb.Data3d)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // repeated double data = 1;
    if (this->data_size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_data_cached_byte_size_.load(
            std::memory_order_relaxed));
        ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
            this->data().data(), this->data_size(), output);
    }

    // uint32 x = 2;
    if (this->x() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
    }

    // uint32 y = 3;
    if (this->y() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
    }

    // uint32 z = 4;
    if (this->z() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->z(), output);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:pb.Data3d)
}

::google::protobuf::uint8 *Data3d::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const
{
    // @@protoc_insertion_point(serialize_to_array_start:pb.Data3d)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // repeated double data = 1;
    if (this->data_size() > 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            1,
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
            target);
        target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
            _data_cached_byte_size_.load(std::memory_order_relaxed),
            target);
        target = ::google::protobuf::internal::WireFormatLite::
            WriteDoubleNoTagToArray(this->data_, target);
    }

    // uint32 x = 2;
    if (this->x() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
    }

    // uint32 y = 3;
    if (this->y() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
    }

    // uint32 z = 4;
    if (this->z() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->z(), target);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:pb.Data3d)
    return target;
}

size_t Data3d::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:pb.Data3d)
    size_t total_size = 0;

    if (_internal_metadata_.have_unknown_fields())
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                _internal_metadata_.unknown_fields());
    }
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // repeated double data = 1;
    {
        unsigned int count = static_cast<unsigned int>(this->data_size());
        size_t data_size = 8UL * count;
        if (data_size > 0)
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::Int32Size(
                              static_cast<::google::protobuf::int32>(data_size));
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        _data_cached_byte_size_.store(cached_size,
                                      std::memory_order_relaxed);
        total_size += data_size;
    }

    // uint32 x = 2;
    if (this->x() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::UInt32Size(
                          this->x());
    }

    // uint32 y = 3;
    if (this->y() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::UInt32Size(
                          this->y());
    }

    // uint32 z = 4;
    if (this->z() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::UInt32Size(
                          this->z());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Data3d::MergeFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:pb.Data3d)
    GOOGLE_DCHECK_NE(&from, this);
    const Data3d *source =
        ::google::protobuf::DynamicCastToGenerated<Data3d>(
            &from);
    if (source == nullptr)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Data3d)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Data3d)
        MergeFrom(*source);
    }
}

void Data3d::MergeFrom(const Data3d &from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:pb.Data3d)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    data_.MergeFrom(from.data_);
    if (from.x() != 0)
    {
        set_x(from.x());
    }
    if (from.y() != 0)
    {
        set_y(from.y());
    }
    if (from.z() != 0)
    {
        set_z(from.z());
    }
}

void Data3d::CopyFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:pb.Data3d)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void Data3d::CopyFrom(const Data3d &from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:pb.Data3d)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Data3d::IsInitialized() const
{
    return true;
}

void Data3d::Swap(Data3d *other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Data3d::InternalSwap(Data3d *other)
{
    using std::swap;
    _internal_metadata_.Swap(&other->_internal_metadata_);
    data_.InternalSwap(&other->data_);
    swap(x_, other->x_);
    swap(y_, other->y_);
    swap(z_, other->z_);
}

::google::protobuf::Metadata Data3d::GetMetadata() const
{
    ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Project_2epb);
    return ::file_level_metadata_Project_2epb[kIndexInFileMessages];
}

// ===================================================================

void ObservationSystemSetting::InitAsDefaultInstance()
{
    ::pb::_ObservationSystemSetting_default_instance_._instance.get_mutable()->faceposition_ = const_cast<::pb::Vec3d *>(
        ::pb::Vec3d::internal_default_instance());
}
class ObservationSystemSetting::HasBitSetters
{
  public:
    static const ::pb::Vec3d &faceposition(const ObservationSystemSetting *msg);
};

const ::pb::Vec3d &
ObservationSystemSetting::HasBitSetters::faceposition(const ObservationSystemSetting *msg)
{
    return *msg->faceposition_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObservationSystemSetting::kFaceWidthFieldNumber;
const int ObservationSystemSetting::kFaceHeightFieldNumber;
const int ObservationSystemSetting::kFacePositionFieldNumber;
const int ObservationSystemSetting::kPowerSupplyPointDataFieldNumber;
const int ObservationSystemSetting::kMeasuringPointDataFieldNumber;
const int ObservationSystemSetting::kElecCircleDisVecFieldNumber;
const int ObservationSystemSetting::kDeviceTypeFieldNumber;
const int ObservationSystemSetting::kMileageNumberFieldNumber;
const int ObservationSystemSetting::kExcavationDirFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ObservationSystemSetting::ObservationSystemSetting()
    : ::google::protobuf::Message(), _internal_metadata_(nullptr)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:pb.ObservationSystemSetting)
}
ObservationSystemSetting::ObservationSystemSetting(const ObservationSystemSetting &from)
    : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      powersupplypointdata_(from.powersupplypointdata_),
      measuringpointdata_(from.measuringpointdata_),
      eleccircledisvec_(from.eleccircledisvec_)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    mileagenumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.mileagenumber().size() > 0)
    {
        mileagenumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mileagenumber_);
    }
    if (from.has_faceposition())
    {
        faceposition_ = new ::pb::Vec3d(*from.faceposition_);
    }
    else
    {
        faceposition_ = nullptr;
    }
    ::memcpy(&facewidth_, &from.facewidth_,
             static_cast<size_t>(reinterpret_cast<char *>(&excavationdir_) -
                                 reinterpret_cast<char *>(&facewidth_)) +
                 sizeof(excavationdir_));
    // @@protoc_insertion_point(copy_constructor:pb.ObservationSystemSetting)
}

void ObservationSystemSetting::SharedCtor()
{
    ::google::protobuf::internal::InitSCC(
        &scc_info_ObservationSystemSetting_Project_2epb.base);
    mileagenumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(&faceposition_, 0, static_cast<size_t>(
                                    reinterpret_cast<char *>(&excavationdir_) -
                                    reinterpret_cast<char *>(&faceposition_)) +
                                    sizeof(excavationdir_));
}

ObservationSystemSetting::~ObservationSystemSetting()
{
    // @@protoc_insertion_point(destructor:pb.ObservationSystemSetting)
    SharedDtor();
}

void ObservationSystemSetting::SharedDtor()
{
    mileagenumber_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (this != internal_default_instance())
        delete faceposition_;
}

void ObservationSystemSetting::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const ObservationSystemSetting &ObservationSystemSetting::default_instance()
{
    ::google::protobuf::internal::InitSCC(&::scc_info_ObservationSystemSetting_Project_2epb.base);
    return *internal_default_instance();
}

void ObservationSystemSetting::Clear()
{
    // @@protoc_insertion_point(message_clear_start:pb.ObservationSystemSetting)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    powersupplypointdata_.Clear();
    measuringpointdata_.Clear();
    eleccircledisvec_.Clear();
    mileagenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (GetArenaNoVirtual() == nullptr && faceposition_ != nullptr)
    {
        delete faceposition_;
    }
    faceposition_ = nullptr;
    ::memset(&facewidth_, 0, static_cast<size_t>(
                                 reinterpret_cast<char *>(&excavationdir_) -
                                 reinterpret_cast<char *>(&facewidth_)) +
                                 sizeof(excavationdir_));
    _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char *ObservationSystemSetting::_InternalParse(const char *begin, const char *end, void *object,
                                                     ::google::protobuf::internal::ParseContext *ctx)
{
    auto msg = static_cast<ObservationSystemSetting *>(object);
    ::google::protobuf::int32 size;
    (void)size;
    int depth;
    (void)depth;
    ::google::protobuf::uint32 tag;
    ::google::protobuf::internal::ParseFunc parser_till_end;
    (void)parser_till_end;
    auto ptr = begin;
    while (ptr < end)
    {
        ptr = ::google::protobuf::io::Parse32(ptr, &tag);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        switch (tag >> 3)
        {
        // float faceWidth = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 13)
                goto handle_unusual;
            msg->set_facewidth(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            break;
        }
        // float faceHeight = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 21)
                goto handle_unusual;
            msg->set_faceheight(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            break;
        }
        // .pb.Vec3d facePosition = 3;
        case 3:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 26)
                goto handle_unusual;
            ptr = ::google::protobuf::io::ReadSize(ptr, &size);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            parser_till_end = ::pb::Vec3d::_InternalParse;
            object = msg->mutable_faceposition();
            if (size > end - ptr)
                goto len_delim_till_end;
            ptr += size;
            GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
                {parser_till_end, object}, ptr - size, ptr));
            break;
        }
        // repeated .pb.Vec3d powerSupplyPointData = 4;
        case 4:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 34)
                goto handle_unusual;
            do
            {
                ptr = ::google::protobuf::io::ReadSize(ptr, &size);
                GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
                parser_till_end = ::pb::Vec3d::_InternalParse;
                object = msg->add_powersupplypointdata();
                if (size > end - ptr)
                    goto len_delim_till_end;
                ptr += size;
                GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
                    {parser_till_end, object}, ptr - size, ptr));
                if (ptr >= end)
                    break;
            } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
            break;
        }
        // repeated .pb.Vec3d measuringPointData = 5;
        case 5:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 42)
                goto handle_unusual;
            do
            {
                ptr = ::google::protobuf::io::ReadSize(ptr, &size);
                GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
                parser_till_end = ::pb::Vec3d::_InternalParse;
                object = msg->add_measuringpointdata();
                if (size > end - ptr)
                    goto len_delim_till_end;
                ptr += size;
                GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
                    {parser_till_end, object}, ptr - size, ptr));
                if (ptr >= end)
                    break;
            } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
            break;
        }
        // repeated float elecCircleDisVec = 6;
        case 6:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == 50)
            {
                ptr = ::google::protobuf::io::ReadSize(ptr, &size);
                GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
                parser_till_end = ::google::protobuf::internal::PackedFloatParser;
                object = msg->mutable_eleccircledisvec();
                if (size > end - ptr)
                    goto len_delim_till_end;
                auto newend = ptr + size;
                if (size)
                    ptr = parser_till_end(ptr, newend, object, ctx);
                GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
                break;
            }
            else if (static_cast<::google::protobuf::uint8>(tag) != 53)
                goto handle_unusual;
            do
            {
                msg->add_eleccircledisvec(::google::protobuf::io::UnalignedLoad<float>(ptr));
                ptr += sizeof(float);
                if (ptr >= end)
                    break;
            } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 53 && (ptr += 1));
            break;
        }
        // .pb.DeviceType deviceType = 7;
        case 7:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 56)
                goto handle_unusual;
            ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
            msg->set_devicetype(static_cast<::pb::DeviceType>(val));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            break;
        }
        // string mileageNumber = 8;
        case 8:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 66)
                goto handle_unusual;
            ptr = ::google::protobuf::io::ReadSize(ptr, &size);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            ctx->extra_parse_data().SetFieldName("pb.ObservationSystemSetting.mileageNumber");
            object = msg->mutable_mileagenumber();
            if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes)
            {
                parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
                goto string_till_end;
            }
            GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
            ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
            ptr += size;
            break;
        }
        // .pb.ExcavationDir excavationDir = 9;
        case 9:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 72)
                goto handle_unusual;
            ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
            msg->set_excavationdir(static_cast<::pb::ExcavationDir>(val));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            break;
        }
        default:
        {
        handle_unusual:
            if ((tag & 7) == 4 || tag == 0)
            {
                ctx->EndGroup(tag);
                return ptr;
            }
            auto res = UnknownFieldParse(tag, {_InternalParse, msg},
                                         ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
            ptr = res.first;
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
            if (res.second)
                return ptr;
        }
        } // switch
    }     // while
    return ptr;
string_till_end:
    static_cast<::std::string *>(object)->clear();
    static_cast<::std::string *>(object)->reserve(size);
    goto len_delim_till_end;
len_delim_till_end:
    return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
}
#else // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObservationSystemSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input)
{
#define DO_(EXPRESSION)                     \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:pb.ObservationSystemSetting)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // float faceWidth = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (13 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                    input, &facewidth_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // float faceHeight = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (21 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                    input, &faceheight_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // .pb.Vec3d facePosition = 3;
        case 3:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (26 & 0xFF))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                    input, mutable_faceposition()));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // repeated .pb.Vec3d powerSupplyPointData = 4;
        case 4:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (34 & 0xFF))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                    input, add_powersupplypointdata()));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // repeated .pb.Vec3d measuringPointData = 5;
        case 5:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (42 & 0xFF))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                    input, add_measuringpointdata()));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // repeated float elecCircleDisVec = 6;
        case 6:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (50 & 0xFF))
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                    input, this->mutable_eleccircledisvec())));
            }
            else if (static_cast<::google::protobuf::uint8>(tag) == (53 & 0xFF))
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                    1, 50u, input, this->mutable_eleccircledisvec())));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // .pb.DeviceType deviceType = 7;
        case 7:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (56 & 0xFF))
            {
                int value = 0;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                set_devicetype(static_cast<::pb::DeviceType>(value));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // string mileageNumber = 8;
        case 8:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (66 & 0xFF))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_mileagenumber()));
                DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    this->mileagenumber().data(), static_cast<int>(this->mileagenumber().length()),
                    ::google::protobuf::internal::WireFormatLite::PARSE,
                    "pb.ObservationSystemSetting.mileageNumber"));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // .pb.ExcavationDir excavationDir = 9;
        case 9:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (72 & 0xFF))
            {
                int value = 0;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                set_excavationdir(static_cast<::pb::ExcavationDir>(value));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        default:
        {
        handle_unusual:
            if (tag == 0)
            {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                input, tag, _internal_metadata_.mutable_unknown_fields()));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:pb.ObservationSystemSetting)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:pb.ObservationSystemSetting)
    return false;
#undef DO_
}
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObservationSystemSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const
{
    // @@protoc_insertion_point(serialize_start:pb.ObservationSystemSetting)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // float faceWidth = 1;
    if (this->facewidth() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->facewidth(), output);
    }

    // float faceHeight = 2;
    if (this->faceheight() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->faceheight(), output);
    }

    // .pb.Vec3d facePosition = 3;
    if (this->has_faceposition())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, HasBitSetters::faceposition(this), output);
    }

    // repeated .pb.Vec3d powerSupplyPointData = 4;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->powersupplypointdata_size());
         i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4,
            this->powersupplypointdata(static_cast<int>(i)),
            output);
    }

    // repeated .pb.Vec3d measuringPointData = 5;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->measuringpointdata_size());
         i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5,
            this->measuringpointdata(static_cast<int>(i)),
            output);
    }

    // repeated float elecCircleDisVec = 6;
    if (this->eleccircledisvec_size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_eleccircledisvec_cached_byte_size_.load(
            std::memory_order_relaxed));
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
            this->eleccircledisvec().data(), this->eleccircledisvec_size(), output);
    }

    // .pb.DeviceType deviceType = 7;
    if (this->devicetype() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            7, this->devicetype(), output);
    }

    // string mileageNumber = 8;
    if (this->mileagenumber().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mileagenumber().data(), static_cast<int>(this->mileagenumber().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "pb.ObservationSystemSetting.mileageNumber");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            8, this->mileagenumber(), output);
    }

    // .pb.ExcavationDir excavationDir = 9;
    if (this->excavationdir() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            9, this->excavationdir(), output);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:pb.ObservationSystemSetting)
}

::google::protobuf::uint8 *ObservationSystemSetting::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const
{
    // @@protoc_insertion_point(serialize_to_array_start:pb.ObservationSystemSetting)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // float faceWidth = 1;
    if (this->facewidth() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->facewidth(), target);
    }

    // float faceHeight = 2;
    if (this->faceheight() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->faceheight(), target);
    }

    // .pb.Vec3d facePosition = 3;
    if (this->has_faceposition())
    {
        target = ::google::protobuf::internal::WireFormatLite::
            InternalWriteMessageToArray(
                3, HasBitSetters::faceposition(this), target);
    }

    // repeated .pb.Vec3d powerSupplyPointData = 4;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->powersupplypointdata_size());
         i < n; i++)
    {
        target = ::google::protobuf::internal::WireFormatLite::
            InternalWriteMessageToArray(
                4, this->powersupplypointdata(static_cast<int>(i)), target);
    }

    // repeated .pb.Vec3d measuringPointData = 5;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->measuringpointdata_size());
         i < n; i++)
    {
        target = ::google::protobuf::internal::WireFormatLite::
            InternalWriteMessageToArray(
                5, this->measuringpointdata(static_cast<int>(i)), target);
    }

    // repeated float elecCircleDisVec = 6;
    if (this->eleccircledisvec_size() > 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            6,
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
            target);
        target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
            _eleccircledisvec_cached_byte_size_.load(std::memory_order_relaxed),
            target);
        target = ::google::protobuf::internal::WireFormatLite::
            WriteFloatNoTagToArray(this->eleccircledisvec_, target);
    }

    // .pb.DeviceType deviceType = 7;
    if (this->devicetype() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
            7, this->devicetype(), target);
    }

    // string mileageNumber = 8;
    if (this->mileagenumber().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mileagenumber().data(), static_cast<int>(this->mileagenumber().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "pb.ObservationSystemSetting.mileageNumber");
        target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                8, this->mileagenumber(), target);
    }

    // .pb.ExcavationDir excavationDir = 9;
    if (this->excavationdir() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
            9, this->excavationdir(), target);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:pb.ObservationSystemSetting)
    return target;
}

size_t ObservationSystemSetting::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:pb.ObservationSystemSetting)
    size_t total_size = 0;

    if (_internal_metadata_.have_unknown_fields())
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                _internal_metadata_.unknown_fields());
    }
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // repeated .pb.Vec3d powerSupplyPointData = 4;
    {
        unsigned int count = static_cast<unsigned int>(this->powersupplypointdata_size());
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++)
        {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSize(
                    this->powersupplypointdata(static_cast<int>(i)));
        }
    }

    // repeated .pb.Vec3d measuringPointData = 5;
    {
        unsigned int count = static_cast<unsigned int>(this->measuringpointdata_size());
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++)
        {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSize(
                    this->measuringpointdata(static_cast<int>(i)));
        }
    }

    // repeated float elecCircleDisVec = 6;
    {
        unsigned int count = static_cast<unsigned int>(this->eleccircledisvec_size());
        size_t data_size = 4UL * count;
        if (data_size > 0)
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::Int32Size(
                              static_cast<::google::protobuf::int32>(data_size));
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        _eleccircledisvec_cached_byte_size_.store(cached_size,
                                                  std::memory_order_relaxed);
        total_size += data_size;
    }

    // string mileageNumber = 8;
    if (this->mileagenumber().size() > 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->mileagenumber());
    }

    // .pb.Vec3d facePosition = 3;
    if (this->has_faceposition())
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *faceposition_);
    }

    // float faceWidth = 1;
    if (this->facewidth() != 0)
    {
        total_size += 1 + 4;
    }

    // float faceHeight = 2;
    if (this->faceheight() != 0)
    {
        total_size += 1 + 4;
    }

    // .pb.DeviceType deviceType = 7;
    if (this->devicetype() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::EnumSize(this->devicetype());
    }

    // .pb.ExcavationDir excavationDir = 9;
    if (this->excavationdir() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::EnumSize(this->excavationdir());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void ObservationSystemSetting::MergeFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:pb.ObservationSystemSetting)
    GOOGLE_DCHECK_NE(&from, this);
    const ObservationSystemSetting *source =
        ::google::protobuf::DynamicCastToGenerated<ObservationSystemSetting>(
            &from);
    if (source == nullptr)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ObservationSystemSetting)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ObservationSystemSetting)
        MergeFrom(*source);
    }
}

void ObservationSystemSetting::MergeFrom(const ObservationSystemSetting &from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:pb.ObservationSystemSetting)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    powersupplypointdata_.MergeFrom(from.powersupplypointdata_);
    measuringpointdata_.MergeFrom(from.measuringpointdata_);
    eleccircledisvec_.MergeFrom(from.eleccircledisvec_);
    if (from.mileagenumber().size() > 0)
    {

        mileagenumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mileagenumber_);
    }
    if (from.has_faceposition())
    {
        mutable_faceposition()->::pb::Vec3d::MergeFrom(from.faceposition());
    }
    if (from.facewidth() != 0)
    {
        set_facewidth(from.facewidth());
    }
    if (from.faceheight() != 0)
    {
        set_faceheight(from.faceheight());
    }
    if (from.devicetype() != 0)
    {
        set_devicetype(from.devicetype());
    }
    if (from.excavationdir() != 0)
    {
        set_excavationdir(from.excavationdir());
    }
}

void ObservationSystemSetting::CopyFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:pb.ObservationSystemSetting)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void ObservationSystemSetting::CopyFrom(const ObservationSystemSetting &from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:pb.ObservationSystemSetting)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ObservationSystemSetting::IsInitialized() const
{
    return true;
}

void ObservationSystemSetting::Swap(ObservationSystemSetting *other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ObservationSystemSetting::InternalSwap(ObservationSystemSetting *other)
{
    using std::swap;
    _internal_metadata_.Swap(&other->_internal_metadata_);
    CastToBase(&powersupplypointdata_)->InternalSwap(CastToBase(&other->powersupplypointdata_));
    CastToBase(&measuringpointdata_)->InternalSwap(CastToBase(&other->measuringpointdata_));
    eleccircledisvec_.InternalSwap(&other->eleccircledisvec_);
    mileagenumber_.Swap(&other->mileagenumber_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                        GetArenaNoVirtual());
    swap(faceposition_, other->faceposition_);
    swap(facewidth_, other->facewidth_);
    swap(faceheight_, other->faceheight_);
    swap(devicetype_, other->devicetype_);
    swap(excavationdir_, other->excavationdir_);
}

::google::protobuf::Metadata ObservationSystemSetting::GetMetadata() const
{
    ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Project_2epb);
    return ::file_level_metadata_Project_2epb[kIndexInFileMessages];
}

// ===================================================================

void ForwardModelingParaSetting::InitAsDefaultInstance()
{
}
class ForwardModelingParaSetting::HasBitSetters
{
  public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForwardModelingParaSetting::kPotentialDeviceSelectionSwitchFieldNumber;
const int ForwardModelingParaSetting::kCurrentINumXFieldNumber;
const int ForwardModelingParaSetting::kCurrentINumYFieldNumber;
const int ForwardModelingParaSetting::kCurrentINumZFieldNumber;
const int ForwardModelingParaSetting::kIIFieldNumber;
const int ForwardModelingParaSetting::kCIIFieldNumber;
const int ForwardModelingParaSetting::kSgM0ValueFieldNumber;
const int ForwardModelingParaSetting::kInverX1FieldNumber;
const int ForwardModelingParaSetting::kInverX2FieldNumber;
const int ForwardModelingParaSetting::kInverY1FieldNumber;
const int ForwardModelingParaSetting::kInverY2FieldNumber;
const int ForwardModelingParaSetting::kInverZ1FieldNumber;
const int ForwardModelingParaSetting::kInverZ2FieldNumber;
const int ForwardModelingParaSetting::kActualBeginXFieldNumber;
const int ForwardModelingParaSetting::kActualEndXFieldNumber;
const int ForwardModelingParaSetting::kActualBeginYFieldNumber;
const int ForwardModelingParaSetting::kActualEndYFieldNumber;
const int ForwardModelingParaSetting::kActualBeginZFieldNumber;
const int ForwardModelingParaSetting::kActualEndZFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ForwardModelingParaSetting::ForwardModelingParaSetting()
    : ::google::protobuf::Message(), _internal_metadata_(nullptr)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:pb.ForwardModelingParaSetting)
}
ForwardModelingParaSetting::ForwardModelingParaSetting(const ForwardModelingParaSetting &from)
    : ::google::protobuf::Message(),
      _internal_metadata_(nullptr)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&potentialdeviceselectionswitch_, &from.potentialdeviceselectionswitch_,
             static_cast<size_t>(reinterpret_cast<char *>(&actual_end_z_) -
                                 reinterpret_cast<char *>(&potentialdeviceselectionswitch_)) +
                 sizeof(actual_end_z_));
    // @@protoc_insertion_point(copy_constructor:pb.ForwardModelingParaSetting)
}

void ForwardModelingParaSetting::SharedCtor()
{
    ::memset(&potentialdeviceselectionswitch_, 0, static_cast<size_t>(
                                                      reinterpret_cast<char *>(&actual_end_z_) -
                                                      reinterpret_cast<char *>(&potentialdeviceselectionswitch_)) +
                                                      sizeof(actual_end_z_));
}

ForwardModelingParaSetting::~ForwardModelingParaSetting()
{
    // @@protoc_insertion_point(destructor:pb.ForwardModelingParaSetting)
    SharedDtor();
}

void ForwardModelingParaSetting::SharedDtor()
{
}

void ForwardModelingParaSetting::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const ForwardModelingParaSetting &ForwardModelingParaSetting::default_instance()
{
    ::google::protobuf::internal::InitSCC(&::scc_info_ForwardModelingParaSetting_Project_2epb.base);
    return *internal_default_instance();
}

void ForwardModelingParaSetting::Clear()
{
    // @@protoc_insertion_point(message_clear_start:pb.ForwardModelingParaSetting)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    ::memset(&potentialdeviceselectionswitch_, 0, static_cast<size_t>(
                                                      reinterpret_cast<char *>(&actual_end_z_) -
                                                      reinterpret_cast<char *>(&potentialdeviceselectionswitch_)) +
                                                      sizeof(actual_end_z_));
    _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char *ForwardModelingParaSetting::_InternalParse(const char *begin, const char *end, void *object,
                                                       ::google::protobuf::internal::ParseContext *ctx)
{
    auto msg = static_cast<ForwardModelingParaSetting *>(object);
    ::google::protobuf::int32 size;
    (void)size;
    int depth;
    (void)depth;
    ::google::protobuf::uint32 tag;
    ::google::protobuf::internal::ParseFunc parser_till_end;
    (void)parser_till_end;
    auto ptr = begin;
    while (ptr < end)
    {
        ptr = ::google::protobuf::io::Parse32(ptr, &tag);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        switch (tag >> 3)
        {
        // .pb.PotentialDeviceSelectionSwitch potentialDeviceSelectionSwitch = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 8)
                goto handle_unusual;
            ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
            msg->set_potentialdeviceselectionswitch(static_cast<::pb::PotentialDeviceSelectionSwitch>(val));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            break;
        }
        // uint32 currentINumX = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 16)
                goto handle_unusual;
            msg->set_currentinumx(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            break;
        }
        // uint32 currentINumY = 3;
        case 3:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 24)
                goto handle_unusual;
            msg->set_currentinumy(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            break;
        }
        // uint32 currentINumZ = 4;
        case 4:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 32)
                goto handle_unusual;
            msg->set_currentinumz(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            break;
        }
        // double II = 5;
        case 5:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 41)
                goto handle_unusual;
            msg->set_ii(::google::protobuf::io::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            break;
        }
        // double CII = 6;
        case 6:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 49)
                goto handle_unusual;
            msg->set_cii(::google::protobuf::io::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            break;
        }
        // double sgM0Value = 7;
        case 7:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 57)
                goto handle_unusual;
            msg->set_sgm0value(::google::protobuf::io::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            break;
        }
        // uint32 inverX1 = 8;
        case 8:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 64)
                goto handle_unusual;
            msg->set_inverx1(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            break;
        }
        // uint32 inverX2 = 9;
        case 9:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 72)
                goto handle_unusual;
            msg->set_inverx2(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            break;
        }
        // uint32 inverY1 = 10;
        case 10:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 80)
                goto handle_unusual;
            msg->set_invery1(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            break;
        }
        // uint32 inverY2 = 11;
        case 11:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 88)
                goto handle_unusual;
            msg->set_invery2(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            break;
        }
        // uint32 inverZ1 = 12;
        case 12:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 96)
                goto handle_unusual;
            msg->set_inverz1(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            break;
        }
        // uint32 inverZ2 = 13;
        case 13:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 104)
                goto handle_unusual;
            msg->set_inverz2(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            break;
        }
        // float actual_begin_x = 14;
        case 14:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 117)
                goto handle_unusual;
            msg->set_actual_begin_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            break;
        }
        // float actual_end_x = 15;
        case 15:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 125)
                goto handle_unusual;
            msg->set_actual_end_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            break;
        }
        // float actual_begin_y = 16;
        case 16:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 133)
                goto handle_unusual;
            msg->set_actual_begin_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            break;
        }
        // float actual_end_y = 17;
        case 17:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 141)
                goto handle_unusual;
            msg->set_actual_end_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            break;
        }
        // float actual_begin_z = 18;
        case 18:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 149)
                goto handle_unusual;
            msg->set_actual_begin_z(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            break;
        }
        // float actual_end_z = 19;
        case 19:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 157)
                goto handle_unusual;
            msg->set_actual_end_z(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            break;
        }
        default:
        {
        handle_unusual:
            if ((tag & 7) == 4 || tag == 0)
            {
                ctx->EndGroup(tag);
                return ptr;
            }
            auto res = UnknownFieldParse(tag, {_InternalParse, msg},
                                         ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
            ptr = res.first;
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
            if (res.second)
                return ptr;
        }
        } // switch
    }     // while
    return ptr;
}
#else // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ForwardModelingParaSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input)
{
#define DO_(EXPRESSION)                     \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:pb.ForwardModelingParaSetting)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // .pb.PotentialDeviceSelectionSwitch potentialDeviceSelectionSwitch = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (8 & 0xFF))
            {
                int value = 0;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                set_potentialdeviceselectionswitch(static_cast<::pb::PotentialDeviceSelectionSwitch>(value));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // uint32 currentINumX = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (16 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &currentinumx_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // uint32 currentINumY = 3;
        case 3:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (24 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &currentinumy_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // uint32 currentINumZ = 4;
        case 4:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (32 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &currentinumz_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // double II = 5;
        case 5:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (41 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    input, &ii_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // double CII = 6;
        case 6:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (49 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    input, &cii_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // double sgM0Value = 7;
        case 7:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (57 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    input, &sgm0value_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // uint32 inverX1 = 8;
        case 8:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (64 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &inverx1_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // uint32 inverX2 = 9;
        case 9:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (72 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &inverx2_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // uint32 inverY1 = 10;
        case 10:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (80 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &invery1_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // uint32 inverY2 = 11;
        case 11:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (88 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &invery2_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // uint32 inverZ1 = 12;
        case 12:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (96 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &inverz1_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // uint32 inverZ2 = 13;
        case 13:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (104 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &inverz2_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // float actual_begin_x = 14;
        case 14:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (117 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                    input, &actual_begin_x_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // float actual_end_x = 15;
        case 15:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (125 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                    input, &actual_end_x_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // float actual_begin_y = 16;
        case 16:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (133 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                    input, &actual_begin_y_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // float actual_end_y = 17;
        case 17:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (141 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                    input, &actual_end_y_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // float actual_begin_z = 18;
        case 18:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (149 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                    input, &actual_begin_z_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // float actual_end_z = 19;
        case 19:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (157 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                    input, &actual_end_z_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        default:
        {
        handle_unusual:
            if (tag == 0)
            {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                input, tag, _internal_metadata_.mutable_unknown_fields()));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:pb.ForwardModelingParaSetting)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:pb.ForwardModelingParaSetting)
    return false;
#undef DO_
}
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ForwardModelingParaSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const
{
    // @@protoc_insertion_point(serialize_start:pb.ForwardModelingParaSetting)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // .pb.PotentialDeviceSelectionSwitch potentialDeviceSelectionSwitch = 1;
    if (this->potentialdeviceselectionswitch() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            1, this->potentialdeviceselectionswitch(), output);
    }

    // uint32 currentINumX = 2;
    if (this->currentinumx() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->currentinumx(), output);
    }

    // uint32 currentINumY = 3;
    if (this->currentinumy() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->currentinumy(), output);
    }

    // uint32 currentINumZ = 4;
    if (this->currentinumz() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->currentinumz(), output);
    }

    // double II = 5;
    if (this->ii() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ii(), output);
    }

    // double CII = 6;
    if (this->cii() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->cii(), output);
    }

    // double sgM0Value = 7;
    if (this->sgm0value() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->sgm0value(), output);
    }

    // uint32 inverX1 = 8;
    if (this->inverx1() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->inverx1(), output);
    }

    // uint32 inverX2 = 9;
    if (this->inverx2() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->inverx2(), output);
    }

    // uint32 inverY1 = 10;
    if (this->invery1() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->invery1(), output);
    }

    // uint32 inverY2 = 11;
    if (this->invery2() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->invery2(), output);
    }

    // uint32 inverZ1 = 12;
    if (this->inverz1() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->inverz1(), output);
    }

    // uint32 inverZ2 = 13;
    if (this->inverz2() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->inverz2(), output);
    }

    // float actual_begin_x = 14;
    if (this->actual_begin_x() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->actual_begin_x(), output);
    }

    // float actual_end_x = 15;
    if (this->actual_end_x() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->actual_end_x(), output);
    }

    // float actual_begin_y = 16;
    if (this->actual_begin_y() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->actual_begin_y(), output);
    }

    // float actual_end_y = 17;
    if (this->actual_end_y() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->actual_end_y(), output);
    }

    // float actual_begin_z = 18;
    if (this->actual_begin_z() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->actual_begin_z(), output);
    }

    // float actual_end_z = 19;
    if (this->actual_end_z() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->actual_end_z(), output);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:pb.ForwardModelingParaSetting)
}

::google::protobuf::uint8 *ForwardModelingParaSetting::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const
{
    // @@protoc_insertion_point(serialize_to_array_start:pb.ForwardModelingParaSetting)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // .pb.PotentialDeviceSelectionSwitch potentialDeviceSelectionSwitch = 1;
    if (this->potentialdeviceselectionswitch() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
            1, this->potentialdeviceselectionswitch(), target);
    }

    // uint32 currentINumX = 2;
    if (this->currentinumx() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->currentinumx(), target);
    }

    // uint32 currentINumY = 3;
    if (this->currentinumy() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->currentinumy(), target);
    }

    // uint32 currentINumZ = 4;
    if (this->currentinumz() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->currentinumz(), target);
    }

    // double II = 5;
    if (this->ii() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ii(), target);
    }

    // double CII = 6;
    if (this->cii() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->cii(), target);
    }

    // double sgM0Value = 7;
    if (this->sgm0value() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->sgm0value(), target);
    }

    // uint32 inverX1 = 8;
    if (this->inverx1() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->inverx1(), target);
    }

    // uint32 inverX2 = 9;
    if (this->inverx2() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->inverx2(), target);
    }

    // uint32 inverY1 = 10;
    if (this->invery1() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->invery1(), target);
    }

    // uint32 inverY2 = 11;
    if (this->invery2() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->invery2(), target);
    }

    // uint32 inverZ1 = 12;
    if (this->inverz1() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->inverz1(), target);
    }

    // uint32 inverZ2 = 13;
    if (this->inverz2() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->inverz2(), target);
    }

    // float actual_begin_x = 14;
    if (this->actual_begin_x() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->actual_begin_x(), target);
    }

    // float actual_end_x = 15;
    if (this->actual_end_x() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->actual_end_x(), target);
    }

    // float actual_begin_y = 16;
    if (this->actual_begin_y() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->actual_begin_y(), target);
    }

    // float actual_end_y = 17;
    if (this->actual_end_y() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->actual_end_y(), target);
    }

    // float actual_begin_z = 18;
    if (this->actual_begin_z() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->actual_begin_z(), target);
    }

    // float actual_end_z = 19;
    if (this->actual_end_z() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->actual_end_z(), target);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:pb.ForwardModelingParaSetting)
    return target;
}

size_t ForwardModelingParaSetting::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:pb.ForwardModelingParaSetting)
    size_t total_size = 0;

    if (_internal_metadata_.have_unknown_fields())
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                _internal_metadata_.unknown_fields());
    }
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // .pb.PotentialDeviceSelectionSwitch potentialDeviceSelectionSwitch = 1;
    if (this->potentialdeviceselectionswitch() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::EnumSize(this->potentialdeviceselectionswitch());
    }

    // uint32 currentINumX = 2;
    if (this->currentinumx() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::UInt32Size(
                          this->currentinumx());
    }

    // uint32 currentINumY = 3;
    if (this->currentinumy() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::UInt32Size(
                          this->currentinumy());
    }

    // uint32 currentINumZ = 4;
    if (this->currentinumz() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::UInt32Size(
                          this->currentinumz());
    }

    // double II = 5;
    if (this->ii() != 0)
    {
        total_size += 1 + 8;
    }

    // double CII = 6;
    if (this->cii() != 0)
    {
        total_size += 1 + 8;
    }

    // double sgM0Value = 7;
    if (this->sgm0value() != 0)
    {
        total_size += 1 + 8;
    }

    // uint32 inverX1 = 8;
    if (this->inverx1() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::UInt32Size(
                          this->inverx1());
    }

    // uint32 inverX2 = 9;
    if (this->inverx2() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::UInt32Size(
                          this->inverx2());
    }

    // uint32 inverY1 = 10;
    if (this->invery1() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::UInt32Size(
                          this->invery1());
    }

    // uint32 inverY2 = 11;
    if (this->invery2() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::UInt32Size(
                          this->invery2());
    }

    // uint32 inverZ1 = 12;
    if (this->inverz1() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::UInt32Size(
                          this->inverz1());
    }

    // uint32 inverZ2 = 13;
    if (this->inverz2() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::UInt32Size(
                          this->inverz2());
    }

    // float actual_begin_x = 14;
    if (this->actual_begin_x() != 0)
    {
        total_size += 1 + 4;
    }

    // float actual_end_x = 15;
    if (this->actual_end_x() != 0)
    {
        total_size += 1 + 4;
    }

    // float actual_begin_y = 16;
    if (this->actual_begin_y() != 0)
    {
        total_size += 2 + 4;
    }

    // float actual_end_y = 17;
    if (this->actual_end_y() != 0)
    {
        total_size += 2 + 4;
    }

    // float actual_begin_z = 18;
    if (this->actual_begin_z() != 0)
    {
        total_size += 2 + 4;
    }

    // float actual_end_z = 19;
    if (this->actual_end_z() != 0)
    {
        total_size += 2 + 4;
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void ForwardModelingParaSetting::MergeFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:pb.ForwardModelingParaSetting)
    GOOGLE_DCHECK_NE(&from, this);
    const ForwardModelingParaSetting *source =
        ::google::protobuf::DynamicCastToGenerated<ForwardModelingParaSetting>(
            &from);
    if (source == nullptr)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ForwardModelingParaSetting)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ForwardModelingParaSetting)
        MergeFrom(*source);
    }
}

void ForwardModelingParaSetting::MergeFrom(const ForwardModelingParaSetting &from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:pb.ForwardModelingParaSetting)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.potentialdeviceselectionswitch() != 0)
    {
        set_potentialdeviceselectionswitch(from.potentialdeviceselectionswitch());
    }
    if (from.currentinumx() != 0)
    {
        set_currentinumx(from.currentinumx());
    }
    if (from.currentinumy() != 0)
    {
        set_currentinumy(from.currentinumy());
    }
    if (from.currentinumz() != 0)
    {
        set_currentinumz(from.currentinumz());
    }
    if (from.ii() != 0)
    {
        set_ii(from.ii());
    }
    if (from.cii() != 0)
    {
        set_cii(from.cii());
    }
    if (from.sgm0value() != 0)
    {
        set_sgm0value(from.sgm0value());
    }
    if (from.inverx1() != 0)
    {
        set_inverx1(from.inverx1());
    }
    if (from.inverx2() != 0)
    {
        set_inverx2(from.inverx2());
    }
    if (from.invery1() != 0)
    {
        set_invery1(from.invery1());
    }
    if (from.invery2() != 0)
    {
        set_invery2(from.invery2());
    }
    if (from.inverz1() != 0)
    {
        set_inverz1(from.inverz1());
    }
    if (from.inverz2() != 0)
    {
        set_inverz2(from.inverz2());
    }
    if (from.actual_begin_x() != 0)
    {
        set_actual_begin_x(from.actual_begin_x());
    }
    if (from.actual_end_x() != 0)
    {
        set_actual_end_x(from.actual_end_x());
    }
    if (from.actual_begin_y() != 0)
    {
        set_actual_begin_y(from.actual_begin_y());
    }
    if (from.actual_end_y() != 0)
    {
        set_actual_end_y(from.actual_end_y());
    }
    if (from.actual_begin_z() != 0)
    {
        set_actual_begin_z(from.actual_begin_z());
    }
    if (from.actual_end_z() != 0)
    {
        set_actual_end_z(from.actual_end_z());
    }
}

void ForwardModelingParaSetting::CopyFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:pb.ForwardModelingParaSetting)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void ForwardModelingParaSetting::CopyFrom(const ForwardModelingParaSetting &from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:pb.ForwardModelingParaSetting)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ForwardModelingParaSetting::IsInitialized() const
{
    return true;
}

void ForwardModelingParaSetting::Swap(ForwardModelingParaSetting *other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ForwardModelingParaSetting::InternalSwap(ForwardModelingParaSetting *other)
{
    using std::swap;
    _internal_metadata_.Swap(&other->_internal_metadata_);
    swap(potentialdeviceselectionswitch_, other->potentialdeviceselectionswitch_);
    swap(currentinumx_, other->currentinumx_);
    swap(currentinumy_, other->currentinumy_);
    swap(currentinumz_, other->currentinumz_);
    swap(ii_, other->ii_);
    swap(cii_, other->cii_);
    swap(sgm0value_, other->sgm0value_);
    swap(inverx1_, other->inverx1_);
    swap(inverx2_, other->inverx2_);
    swap(invery1_, other->invery1_);
    swap(invery2_, other->invery2_);
    swap(inverz1_, other->inverz1_);
    swap(inverz2_, other->inverz2_);
    swap(actual_begin_x_, other->actual_begin_x_);
    swap(actual_end_x_, other->actual_end_x_);
    swap(actual_begin_y_, other->actual_begin_y_);
    swap(actual_end_y_, other->actual_end_y_);
    swap(actual_begin_z_, other->actual_begin_z_);
    swap(actual_end_z_, other->actual_end_z_);
}

::google::protobuf::Metadata ForwardModelingParaSetting::GetMetadata() const
{
    ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Project_2epb);
    return ::file_level_metadata_Project_2epb[kIndexInFileMessages];
}

// ===================================================================

void DataPreprocessInfo::InitAsDefaultInstance()
{
    ::pb::_DataPreprocessInfo_default_instance_._instance.get_mutable()->badpoints_ = const_cast<::pb::Data1d *>(
        ::pb::Data1d::internal_default_instance());
}
class DataPreprocessInfo::HasBitSetters
{
  public:
    static const ::pb::Data1d &badpoints(const DataPreprocessInfo *msg);
};

const ::pb::Data1d &
DataPreprocessInfo::HasBitSetters::badpoints(const DataPreprocessInfo *msg)
{
    return *msg->badpoints_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataPreprocessInfo::kBadPointsFieldNumber;
const int DataPreprocessInfo::kObserveDataListFieldNumber;
const int DataPreprocessInfo::kAdjustmentDataVecFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DataPreprocessInfo::DataPreprocessInfo()
    : ::google::protobuf::Message(), _internal_metadata_(nullptr)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:pb.DataPreprocessInfo)
}
DataPreprocessInfo::DataPreprocessInfo(const DataPreprocessInfo &from)
    : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      observedatalist_(from.observedatalist_),
      adjustmentdatavec_(from.adjustmentdatavec_)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_badpoints())
    {
        badpoints_ = new ::pb::Data1d(*from.badpoints_);
    }
    else
    {
        badpoints_ = nullptr;
    }
    // @@protoc_insertion_point(copy_constructor:pb.DataPreprocessInfo)
}

void DataPreprocessInfo::SharedCtor()
{
    ::google::protobuf::internal::InitSCC(
        &scc_info_DataPreprocessInfo_Project_2epb.base);
    badpoints_ = nullptr;
}

DataPreprocessInfo::~DataPreprocessInfo()
{
    // @@protoc_insertion_point(destructor:pb.DataPreprocessInfo)
    SharedDtor();
}

void DataPreprocessInfo::SharedDtor()
{
    if (this != internal_default_instance())
        delete badpoints_;
}

void DataPreprocessInfo::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const DataPreprocessInfo &DataPreprocessInfo::default_instance()
{
    ::google::protobuf::internal::InitSCC(&::scc_info_DataPreprocessInfo_Project_2epb.base);
    return *internal_default_instance();
}

void DataPreprocessInfo::Clear()
{
    // @@protoc_insertion_point(message_clear_start:pb.DataPreprocessInfo)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    observedatalist_.Clear();
    adjustmentdatavec_.Clear();
    if (GetArenaNoVirtual() == nullptr && badpoints_ != nullptr)
    {
        delete badpoints_;
    }
    badpoints_ = nullptr;
    _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char *DataPreprocessInfo::_InternalParse(const char *begin, const char *end, void *object,
                                               ::google::protobuf::internal::ParseContext *ctx)
{
    auto msg = static_cast<DataPreprocessInfo *>(object);
    ::google::protobuf::int32 size;
    (void)size;
    int depth;
    (void)depth;
    ::google::protobuf::uint32 tag;
    ::google::protobuf::internal::ParseFunc parser_till_end;
    (void)parser_till_end;
    auto ptr = begin;
    while (ptr < end)
    {
        ptr = ::google::protobuf::io::Parse32(ptr, &tag);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        switch (tag >> 3)
        {
        // .pb.Data1d badPoints = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 10)
                goto handle_unusual;
            ptr = ::google::protobuf::io::ReadSize(ptr, &size);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            parser_till_end = ::pb::Data1d::_InternalParse;
            object = msg->mutable_badpoints();
            if (size > end - ptr)
                goto len_delim_till_end;
            ptr += size;
            GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
                {parser_till_end, object}, ptr - size, ptr));
            break;
        }
        // repeated double observeDataList = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == 18)
            {
                ptr = ::google::protobuf::io::ReadSize(ptr, &size);
                GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
                parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
                object = msg->mutable_observedatalist();
                if (size > end - ptr)
                    goto len_delim_till_end;
                auto newend = ptr + size;
                if (size)
                    ptr = parser_till_end(ptr, newend, object, ctx);
                GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
                break;
            }
            else if (static_cast<::google::protobuf::uint8>(tag) != 17)
                goto handle_unusual;
            do
            {
                msg->add_observedatalist(::google::protobuf::io::UnalignedLoad<double>(ptr));
                ptr += sizeof(double);
                if (ptr >= end)
                    break;
            } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 17 && (ptr += 1));
            break;
        }
        // repeated double adjustmentDataVec = 3;
        case 3:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == 26)
            {
                ptr = ::google::protobuf::io::ReadSize(ptr, &size);
                GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
                parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
                object = msg->mutable_adjustmentdatavec();
                if (size > end - ptr)
                    goto len_delim_till_end;
                auto newend = ptr + size;
                if (size)
                    ptr = parser_till_end(ptr, newend, object, ctx);
                GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
                break;
            }
            else if (static_cast<::google::protobuf::uint8>(tag) != 25)
                goto handle_unusual;
            do
            {
                msg->add_adjustmentdatavec(::google::protobuf::io::UnalignedLoad<double>(ptr));
                ptr += sizeof(double);
                if (ptr >= end)
                    break;
            } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 25 && (ptr += 1));
            break;
        }
        default:
        {
        handle_unusual:
            if ((tag & 7) == 4 || tag == 0)
            {
                ctx->EndGroup(tag);
                return ptr;
            }
            auto res = UnknownFieldParse(tag, {_InternalParse, msg},
                                         ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
            ptr = res.first;
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
            if (res.second)
                return ptr;
        }
        } // switch
    }     // while
    return ptr;
len_delim_till_end:
    return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
}
#else // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DataPreprocessInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input)
{
#define DO_(EXPRESSION)                     \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:pb.DataPreprocessInfo)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // .pb.Data1d badPoints = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (10 & 0xFF))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                    input, mutable_badpoints()));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // repeated double observeDataList = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (18 & 0xFF))
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                     double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    input, this->mutable_observedatalist())));
            }
            else if (static_cast<::google::protobuf::uint8>(tag) == (17 & 0xFF))
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                     double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    1, 18u, input, this->mutable_observedatalist())));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // repeated double adjustmentDataVec = 3;
        case 3:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (26 & 0xFF))
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                     double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    input, this->mutable_adjustmentdatavec())));
            }
            else if (static_cast<::google::protobuf::uint8>(tag) == (25 & 0xFF))
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                     double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    1, 26u, input, this->mutable_adjustmentdatavec())));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        default:
        {
        handle_unusual:
            if (tag == 0)
            {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                input, tag, _internal_metadata_.mutable_unknown_fields()));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:pb.DataPreprocessInfo)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:pb.DataPreprocessInfo)
    return false;
#undef DO_
}
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DataPreprocessInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const
{
    // @@protoc_insertion_point(serialize_start:pb.DataPreprocessInfo)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // .pb.Data1d badPoints = 1;
    if (this->has_badpoints())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, HasBitSetters::badpoints(this), output);
    }

    // repeated double observeDataList = 2;
    if (this->observedatalist_size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_observedatalist_cached_byte_size_.load(
            std::memory_order_relaxed));
        ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
            this->observedatalist().data(), this->observedatalist_size(), output);
    }

    // repeated double adjustmentDataVec = 3;
    if (this->adjustmentdatavec_size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_adjustmentdatavec_cached_byte_size_.load(
            std::memory_order_relaxed));
        ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
            this->adjustmentdatavec().data(), this->adjustmentdatavec_size(), output);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:pb.DataPreprocessInfo)
}

::google::protobuf::uint8 *DataPreprocessInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const
{
    // @@protoc_insertion_point(serialize_to_array_start:pb.DataPreprocessInfo)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // .pb.Data1d badPoints = 1;
    if (this->has_badpoints())
    {
        target = ::google::protobuf::internal::WireFormatLite::
            InternalWriteMessageToArray(
                1, HasBitSetters::badpoints(this), target);
    }

    // repeated double observeDataList = 2;
    if (this->observedatalist_size() > 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            2,
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
            target);
        target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
            _observedatalist_cached_byte_size_.load(std::memory_order_relaxed),
            target);
        target = ::google::protobuf::internal::WireFormatLite::
            WriteDoubleNoTagToArray(this->observedatalist_, target);
    }

    // repeated double adjustmentDataVec = 3;
    if (this->adjustmentdatavec_size() > 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            3,
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
            target);
        target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
            _adjustmentdatavec_cached_byte_size_.load(std::memory_order_relaxed),
            target);
        target = ::google::protobuf::internal::WireFormatLite::
            WriteDoubleNoTagToArray(this->adjustmentdatavec_, target);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:pb.DataPreprocessInfo)
    return target;
}

size_t DataPreprocessInfo::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:pb.DataPreprocessInfo)
    size_t total_size = 0;

    if (_internal_metadata_.have_unknown_fields())
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                _internal_metadata_.unknown_fields());
    }
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // repeated double observeDataList = 2;
    {
        unsigned int count = static_cast<unsigned int>(this->observedatalist_size());
        size_t data_size = 8UL * count;
        if (data_size > 0)
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::Int32Size(
                              static_cast<::google::protobuf::int32>(data_size));
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        _observedatalist_cached_byte_size_.store(cached_size,
                                                 std::memory_order_relaxed);
        total_size += data_size;
    }

    // repeated double adjustmentDataVec = 3;
    {
        unsigned int count = static_cast<unsigned int>(this->adjustmentdatavec_size());
        size_t data_size = 8UL * count;
        if (data_size > 0)
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::Int32Size(
                              static_cast<::google::protobuf::int32>(data_size));
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        _adjustmentdatavec_cached_byte_size_.store(cached_size,
                                                   std::memory_order_relaxed);
        total_size += data_size;
    }

    // .pb.Data1d badPoints = 1;
    if (this->has_badpoints())
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *badpoints_);
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void DataPreprocessInfo::MergeFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:pb.DataPreprocessInfo)
    GOOGLE_DCHECK_NE(&from, this);
    const DataPreprocessInfo *source =
        ::google::protobuf::DynamicCastToGenerated<DataPreprocessInfo>(
            &from);
    if (source == nullptr)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.DataPreprocessInfo)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.DataPreprocessInfo)
        MergeFrom(*source);
    }
}

void DataPreprocessInfo::MergeFrom(const DataPreprocessInfo &from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:pb.DataPreprocessInfo)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    observedatalist_.MergeFrom(from.observedatalist_);
    adjustmentdatavec_.MergeFrom(from.adjustmentdatavec_);
    if (from.has_badpoints())
    {
        mutable_badpoints()->::pb::Data1d::MergeFrom(from.badpoints());
    }
}

void DataPreprocessInfo::CopyFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:pb.DataPreprocessInfo)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void DataPreprocessInfo::CopyFrom(const DataPreprocessInfo &from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:pb.DataPreprocessInfo)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DataPreprocessInfo::IsInitialized() const
{
    return true;
}

void DataPreprocessInfo::Swap(DataPreprocessInfo *other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DataPreprocessInfo::InternalSwap(DataPreprocessInfo *other)
{
    using std::swap;
    _internal_metadata_.Swap(&other->_internal_metadata_);
    observedatalist_.InternalSwap(&other->observedatalist_);
    adjustmentdatavec_.InternalSwap(&other->adjustmentdatavec_);
    swap(badpoints_, other->badpoints_);
}

::google::protobuf::Metadata DataPreprocessInfo::GetMetadata() const
{
    ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Project_2epb);
    return ::file_level_metadata_Project_2epb[kIndexInFileMessages];
}

// ===================================================================

void ModelingParam::InitAsDefaultInstance()
{
}
class ModelingParam::HasBitSetters
{
  public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelingParam::kForecastLengthFieldNumber;
const int ModelingParam::kPredictionCellSpacingFieldNumber;
const int ModelingParam::kTunnelCavityRangeXFieldNumber;
const int ModelingParam::kTunnelCavityRangeYFieldNumber;
const int ModelingParam::kInversionAreaRangeXFieldNumber;
const int ModelingParam::kInversionAreaRangeYFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelingParam::ModelingParam()
    : ::google::protobuf::Message(), _internal_metadata_(nullptr)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:pb.ModelingParam)
}
ModelingParam::ModelingParam(const ModelingParam &from)
    : ::google::protobuf::Message(),
      _internal_metadata_(nullptr)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&forecastlength_, &from.forecastlength_,
             static_cast<size_t>(reinterpret_cast<char *>(&inversionarearangey_) -
                                 reinterpret_cast<char *>(&forecastlength_)) +
                 sizeof(inversionarearangey_));
    // @@protoc_insertion_point(copy_constructor:pb.ModelingParam)
}

void ModelingParam::SharedCtor()
{
    ::memset(&forecastlength_, 0, static_cast<size_t>(
                                      reinterpret_cast<char *>(&inversionarearangey_) -
                                      reinterpret_cast<char *>(&forecastlength_)) +
                                      sizeof(inversionarearangey_));
}

ModelingParam::~ModelingParam()
{
    // @@protoc_insertion_point(destructor:pb.ModelingParam)
    SharedDtor();
}

void ModelingParam::SharedDtor()
{
}

void ModelingParam::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const ModelingParam &ModelingParam::default_instance()
{
    ::google::protobuf::internal::InitSCC(&::scc_info_ModelingParam_Project_2epb.base);
    return *internal_default_instance();
}

void ModelingParam::Clear()
{
    // @@protoc_insertion_point(message_clear_start:pb.ModelingParam)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    ::memset(&forecastlength_, 0, static_cast<size_t>(
                                      reinterpret_cast<char *>(&inversionarearangey_) -
                                      reinterpret_cast<char *>(&forecastlength_)) +
                                      sizeof(inversionarearangey_));
    _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char *ModelingParam::_InternalParse(const char *begin, const char *end, void *object,
                                          ::google::protobuf::internal::ParseContext *ctx)
{
    auto msg = static_cast<ModelingParam *>(object);
    ::google::protobuf::int32 size;
    (void)size;
    int depth;
    (void)depth;
    ::google::protobuf::uint32 tag;
    ::google::protobuf::internal::ParseFunc parser_till_end;
    (void)parser_till_end;
    auto ptr = begin;
    while (ptr < end)
    {
        ptr = ::google::protobuf::io::Parse32(ptr, &tag);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        switch (tag >> 3)
        {
        // float forecastLength = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 13)
                goto handle_unusual;
            msg->set_forecastlength(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            break;
        }
        // float predictionCellSpacing = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 21)
                goto handle_unusual;
            msg->set_predictioncellspacing(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            break;
        }
        // float tunnelCavityRangeX = 3;
        case 3:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 29)
                goto handle_unusual;
            msg->set_tunnelcavityrangex(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            break;
        }
        // float tunnelCavityRangeY = 4;
        case 4:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 37)
                goto handle_unusual;
            msg->set_tunnelcavityrangey(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            break;
        }
        // float inversionAreaRangeX = 5;
        case 5:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 45)
                goto handle_unusual;
            msg->set_inversionarearangex(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            break;
        }
        // float inversionAreaRangeY = 6;
        case 6:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 53)
                goto handle_unusual;
            msg->set_inversionarearangey(::google::protobuf::io::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            break;
        }
        default:
        {
        handle_unusual:
            if ((tag & 7) == 4 || tag == 0)
            {
                ctx->EndGroup(tag);
                return ptr;
            }
            auto res = UnknownFieldParse(tag, {_InternalParse, msg},
                                         ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
            ptr = res.first;
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
            if (res.second)
                return ptr;
        }
        } // switch
    }     // while
    return ptr;
}
#else // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModelingParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input)
{
#define DO_(EXPRESSION)                     \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:pb.ModelingParam)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // float forecastLength = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (13 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                    input, &forecastlength_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // float predictionCellSpacing = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (21 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                    input, &predictioncellspacing_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // float tunnelCavityRangeX = 3;
        case 3:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (29 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                    input, &tunnelcavityrangex_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // float tunnelCavityRangeY = 4;
        case 4:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (37 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                    input, &tunnelcavityrangey_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // float inversionAreaRangeX = 5;
        case 5:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (45 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                    input, &inversionarearangex_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // float inversionAreaRangeY = 6;
        case 6:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (53 & 0xFF))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                    input, &inversionarearangey_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        default:
        {
        handle_unusual:
            if (tag == 0)
            {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                input, tag, _internal_metadata_.mutable_unknown_fields()));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:pb.ModelingParam)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:pb.ModelingParam)
    return false;
#undef DO_
}
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModelingParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const
{
    // @@protoc_insertion_point(serialize_start:pb.ModelingParam)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // float forecastLength = 1;
    if (this->forecastlength() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->forecastlength(), output);
    }

    // float predictionCellSpacing = 2;
    if (this->predictioncellspacing() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->predictioncellspacing(), output);
    }

    // float tunnelCavityRangeX = 3;
    if (this->tunnelcavityrangex() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->tunnelcavityrangex(), output);
    }

    // float tunnelCavityRangeY = 4;
    if (this->tunnelcavityrangey() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->tunnelcavityrangey(), output);
    }

    // float inversionAreaRangeX = 5;
    if (this->inversionarearangex() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->inversionarearangex(), output);
    }

    // float inversionAreaRangeY = 6;
    if (this->inversionarearangey() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->inversionarearangey(), output);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:pb.ModelingParam)
}

::google::protobuf::uint8 *ModelingParam::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const
{
    // @@protoc_insertion_point(serialize_to_array_start:pb.ModelingParam)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // float forecastLength = 1;
    if (this->forecastlength() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->forecastlength(), target);
    }

    // float predictionCellSpacing = 2;
    if (this->predictioncellspacing() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->predictioncellspacing(), target);
    }

    // float tunnelCavityRangeX = 3;
    if (this->tunnelcavityrangex() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->tunnelcavityrangex(), target);
    }

    // float tunnelCavityRangeY = 4;
    if (this->tunnelcavityrangey() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->tunnelcavityrangey(), target);
    }

    // float inversionAreaRangeX = 5;
    if (this->inversionarearangex() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->inversionarearangex(), target);
    }

    // float inversionAreaRangeY = 6;
    if (this->inversionarearangey() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->inversionarearangey(), target);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:pb.ModelingParam)
    return target;
}

size_t ModelingParam::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:pb.ModelingParam)
    size_t total_size = 0;

    if (_internal_metadata_.have_unknown_fields())
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                _internal_metadata_.unknown_fields());
    }
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // float forecastLength = 1;
    if (this->forecastlength() != 0)
    {
        total_size += 1 + 4;
    }

    // float predictionCellSpacing = 2;
    if (this->predictioncellspacing() != 0)
    {
        total_size += 1 + 4;
    }

    // float tunnelCavityRangeX = 3;
    if (this->tunnelcavityrangex() != 0)
    {
        total_size += 1 + 4;
    }

    // float tunnelCavityRangeY = 4;
    if (this->tunnelcavityrangey() != 0)
    {
        total_size += 1 + 4;
    }

    // float inversionAreaRangeX = 5;
    if (this->inversionarearangex() != 0)
    {
        total_size += 1 + 4;
    }

    // float inversionAreaRangeY = 6;
    if (this->inversionarearangey() != 0)
    {
        total_size += 1 + 4;
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void ModelingParam::MergeFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:pb.ModelingParam)
    GOOGLE_DCHECK_NE(&from, this);
    const ModelingParam *source =
        ::google::protobuf::DynamicCastToGenerated<ModelingParam>(
            &from);
    if (source == nullptr)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ModelingParam)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ModelingParam)
        MergeFrom(*source);
    }
}

void ModelingParam::MergeFrom(const ModelingParam &from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:pb.ModelingParam)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.forecastlength() != 0)
    {
        set_forecastlength(from.forecastlength());
    }
    if (from.predictioncellspacing() != 0)
    {
        set_predictioncellspacing(from.predictioncellspacing());
    }
    if (from.tunnelcavityrangex() != 0)
    {
        set_tunnelcavityrangex(from.tunnelcavityrangex());
    }
    if (from.tunnelcavityrangey() != 0)
    {
        set_tunnelcavityrangey(from.tunnelcavityrangey());
    }
    if (from.inversionarearangex() != 0)
    {
        set_inversionarearangex(from.inversionarearangex());
    }
    if (from.inversionarearangey() != 0)
    {
        set_inversionarearangey(from.inversionarearangey());
    }
}

void ModelingParam::CopyFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:pb.ModelingParam)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void ModelingParam::CopyFrom(const ModelingParam &from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:pb.ModelingParam)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ModelingParam::IsInitialized() const
{
    return true;
}

void ModelingParam::Swap(ModelingParam *other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ModelingParam::InternalSwap(ModelingParam *other)
{
    using std::swap;
    _internal_metadata_.Swap(&other->_internal_metadata_);
    swap(forecastlength_, other->forecastlength_);
    swap(predictioncellspacing_, other->predictioncellspacing_);
    swap(tunnelcavityrangex_, other->tunnelcavityrangex_);
    swap(tunnelcavityrangey_, other->tunnelcavityrangey_);
    swap(inversionarearangex_, other->inversionarearangex_);
    swap(inversionarearangey_, other->inversionarearangey_);
}

::google::protobuf::Metadata ModelingParam::GetMetadata() const
{
    ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Project_2epb);
    return ::file_level_metadata_Project_2epb[kIndexInFileMessages];
}

// ===================================================================

void ProjectBaseInfo::InitAsDefaultInstance()
{
}
class ProjectBaseInfo::HasBitSetters
{
  public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjectBaseInfo::kProjectNameFieldNumber;
const int ProjectBaseInfo::kProjectVersionFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ProjectBaseInfo::ProjectBaseInfo()
    : ::google::protobuf::Message(), _internal_metadata_(nullptr)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:pb.ProjectBaseInfo)
}
ProjectBaseInfo::ProjectBaseInfo(const ProjectBaseInfo &from)
    : ::google::protobuf::Message(),
      _internal_metadata_(nullptr)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    projectname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.projectname().size() > 0)
    {
        projectname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.projectname_);
    }
    projectversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.projectversion().size() > 0)
    {
        projectversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.projectversion_);
    }
    // @@protoc_insertion_point(copy_constructor:pb.ProjectBaseInfo)
}

void ProjectBaseInfo::SharedCtor()
{
    ::google::protobuf::internal::InitSCC(
        &scc_info_ProjectBaseInfo_Project_2epb.base);
    projectname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    projectversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ProjectBaseInfo::~ProjectBaseInfo()
{
    // @@protoc_insertion_point(destructor:pb.ProjectBaseInfo)
    SharedDtor();
}

void ProjectBaseInfo::SharedDtor()
{
    projectname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    projectversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProjectBaseInfo::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const ProjectBaseInfo &ProjectBaseInfo::default_instance()
{
    ::google::protobuf::internal::InitSCC(&::scc_info_ProjectBaseInfo_Project_2epb.base);
    return *internal_default_instance();
}

void ProjectBaseInfo::Clear()
{
    // @@protoc_insertion_point(message_clear_start:pb.ProjectBaseInfo)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    projectname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    projectversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char *ProjectBaseInfo::_InternalParse(const char *begin, const char *end, void *object,
                                            ::google::protobuf::internal::ParseContext *ctx)
{
    auto msg = static_cast<ProjectBaseInfo *>(object);
    ::google::protobuf::int32 size;
    (void)size;
    int depth;
    (void)depth;
    ::google::protobuf::uint32 tag;
    ::google::protobuf::internal::ParseFunc parser_till_end;
    (void)parser_till_end;
    auto ptr = begin;
    while (ptr < end)
    {
        ptr = ::google::protobuf::io::Parse32(ptr, &tag);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        switch (tag >> 3)
        {
        // string projectName = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 10)
                goto handle_unusual;
            ptr = ::google::protobuf::io::ReadSize(ptr, &size);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            ctx->extra_parse_data().SetFieldName("pb.ProjectBaseInfo.projectName");
            object = msg->mutable_projectname();
            if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes)
            {
                parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
                goto string_till_end;
            }
            GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
            ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
            ptr += size;
            break;
        }
        // string projectVersion = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 18)
                goto handle_unusual;
            ptr = ::google::protobuf::io::ReadSize(ptr, &size);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            ctx->extra_parse_data().SetFieldName("pb.ProjectBaseInfo.projectVersion");
            object = msg->mutable_projectversion();
            if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes)
            {
                parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
                goto string_till_end;
            }
            GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
            ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
            ptr += size;
            break;
        }
        default:
        {
        handle_unusual:
            if ((tag & 7) == 4 || tag == 0)
            {
                ctx->EndGroup(tag);
                return ptr;
            }
            auto res = UnknownFieldParse(tag, {_InternalParse, msg},
                                         ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
            ptr = res.first;
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
            if (res.second)
                return ptr;
        }
        } // switch
    }     // while
    return ptr;
string_till_end:
    static_cast<::std::string *>(object)->clear();
    static_cast<::std::string *>(object)->reserve(size);
    goto len_delim_till_end;
len_delim_till_end:
    return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
}
#else // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProjectBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input)
{
#define DO_(EXPRESSION)                     \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:pb.ProjectBaseInfo)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // string projectName = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (10 & 0xFF))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_projectname()));
                DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    this->projectname().data(), static_cast<int>(this->projectname().length()),
                    ::google::protobuf::internal::WireFormatLite::PARSE,
                    "pb.ProjectBaseInfo.projectName"));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // string projectVersion = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (18 & 0xFF))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_projectversion()));
                DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    this->projectversion().data(), static_cast<int>(this->projectversion().length()),
                    ::google::protobuf::internal::WireFormatLite::PARSE,
                    "pb.ProjectBaseInfo.projectVersion"));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        default:
        {
        handle_unusual:
            if (tag == 0)
            {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                input, tag, _internal_metadata_.mutable_unknown_fields()));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:pb.ProjectBaseInfo)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:pb.ProjectBaseInfo)
    return false;
#undef DO_
}
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProjectBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const
{
    // @@protoc_insertion_point(serialize_start:pb.ProjectBaseInfo)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string projectName = 1;
    if (this->projectname().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->projectname().data(), static_cast<int>(this->projectname().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "pb.ProjectBaseInfo.projectName");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->projectname(), output);
    }

    // string projectVersion = 2;
    if (this->projectversion().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->projectversion().data(), static_cast<int>(this->projectversion().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "pb.ProjectBaseInfo.projectVersion");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->projectversion(), output);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:pb.ProjectBaseInfo)
}

::google::protobuf::uint8 *ProjectBaseInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const
{
    // @@protoc_insertion_point(serialize_to_array_start:pb.ProjectBaseInfo)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string projectName = 1;
    if (this->projectname().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->projectname().data(), static_cast<int>(this->projectname().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "pb.ProjectBaseInfo.projectName");
        target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                1, this->projectname(), target);
    }

    // string projectVersion = 2;
    if (this->projectversion().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->projectversion().data(), static_cast<int>(this->projectversion().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "pb.ProjectBaseInfo.projectVersion");
        target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                2, this->projectversion(), target);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:pb.ProjectBaseInfo)
    return target;
}

size_t ProjectBaseInfo::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:pb.ProjectBaseInfo)
    size_t total_size = 0;

    if (_internal_metadata_.have_unknown_fields())
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                _internal_metadata_.unknown_fields());
    }
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string projectName = 1;
    if (this->projectname().size() > 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->projectname());
    }

    // string projectVersion = 2;
    if (this->projectversion().size() > 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->projectversion());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void ProjectBaseInfo::MergeFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:pb.ProjectBaseInfo)
    GOOGLE_DCHECK_NE(&from, this);
    const ProjectBaseInfo *source =
        ::google::protobuf::DynamicCastToGenerated<ProjectBaseInfo>(
            &from);
    if (source == nullptr)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ProjectBaseInfo)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ProjectBaseInfo)
        MergeFrom(*source);
    }
}

void ProjectBaseInfo::MergeFrom(const ProjectBaseInfo &from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:pb.ProjectBaseInfo)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.projectname().size() > 0)
    {

        projectname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.projectname_);
    }
    if (from.projectversion().size() > 0)
    {

        projectversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.projectversion_);
    }
}

void ProjectBaseInfo::CopyFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:pb.ProjectBaseInfo)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void ProjectBaseInfo::CopyFrom(const ProjectBaseInfo &from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:pb.ProjectBaseInfo)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ProjectBaseInfo::IsInitialized() const
{
    return true;
}

void ProjectBaseInfo::Swap(ProjectBaseInfo *other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ProjectBaseInfo::InternalSwap(ProjectBaseInfo *other)
{
    using std::swap;
    _internal_metadata_.Swap(&other->_internal_metadata_);
    projectname_.Swap(&other->projectname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                      GetArenaNoVirtual());
    projectversion_.Swap(&other->projectversion_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                         GetArenaNoVirtual());
}

::google::protobuf::Metadata ProjectBaseInfo::GetMetadata() const
{
    ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Project_2epb);
    return ::file_level_metadata_Project_2epb[kIndexInFileMessages];
}

// ===================================================================

void ProjectInfo::InitAsDefaultInstance()
{
    ::pb::_ProjectInfo_default_instance_._instance.get_mutable()->projectbaseinfo_ = const_cast<::pb::ProjectBaseInfo *>(
        ::pb::ProjectBaseInfo::internal_default_instance());
    ::pb::_ProjectInfo_default_instance_._instance.get_mutable()->obsystemsetting_ = const_cast<::pb::ObservationSystemSetting *>(
        ::pb::ObservationSystemSetting::internal_default_instance());
    ::pb::_ProjectInfo_default_instance_._instance.get_mutable()->datapreprocess_ = const_cast<::pb::DataPreprocessInfo *>(
        ::pb::DataPreprocessInfo::internal_default_instance());
    ::pb::_ProjectInfo_default_instance_._instance.get_mutable()->modelingparam_ = const_cast<::pb::ModelingParam *>(
        ::pb::ModelingParam::internal_default_instance());
    ::pb::_ProjectInfo_default_instance_._instance.get_mutable()->inversionprocessresult_ = const_cast<::pb::Data3d *>(
        ::pb::Data3d::internal_default_instance());
    ::pb::_ProjectInfo_default_instance_._instance.get_mutable()->simforwardparams_ = const_cast<::pb::ForwardModelingParaSetting *>(
        ::pb::ForwardModelingParaSetting::internal_default_instance());
}
class ProjectInfo::HasBitSetters
{
  public:
    static const ::pb::ProjectBaseInfo &projectbaseinfo(const ProjectInfo *msg);
    static const ::pb::ObservationSystemSetting &obsystemsetting(const ProjectInfo *msg);
    static const ::pb::DataPreprocessInfo &datapreprocess(const ProjectInfo *msg);
    static const ::pb::ModelingParam &modelingparam(const ProjectInfo *msg);
    static const ::pb::Data3d &inversionprocessresult(const ProjectInfo *msg);
    static const ::pb::ForwardModelingParaSetting &simforwardparams(const ProjectInfo *msg);
};

const ::pb::ProjectBaseInfo &
ProjectInfo::HasBitSetters::projectbaseinfo(const ProjectInfo *msg)
{
    return *msg->projectbaseinfo_;
}
const ::pb::ObservationSystemSetting &
ProjectInfo::HasBitSetters::obsystemsetting(const ProjectInfo *msg)
{
    return *msg->obsystemsetting_;
}
const ::pb::DataPreprocessInfo &
ProjectInfo::HasBitSetters::datapreprocess(const ProjectInfo *msg)
{
    return *msg->datapreprocess_;
}
const ::pb::ModelingParam &
ProjectInfo::HasBitSetters::modelingparam(const ProjectInfo *msg)
{
    return *msg->modelingparam_;
}
const ::pb::Data3d &
ProjectInfo::HasBitSetters::inversionprocessresult(const ProjectInfo *msg)
{
    return *msg->inversionprocessresult_;
}
const ::pb::ForwardModelingParaSetting &
ProjectInfo::HasBitSetters::simforwardparams(const ProjectInfo *msg)
{
    return *msg->simforwardparams_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjectInfo::kProjectBaseInfoFieldNumber;
const int ProjectInfo::kObSystemSettingFieldNumber;
const int ProjectInfo::kDataPreprocessFieldNumber;
const int ProjectInfo::kModelingParamFieldNumber;
const int ProjectInfo::kInversionProcessResultFieldNumber;
const int ProjectInfo::kHalfLifeCurveDataListFieldNumber;
const int ProjectInfo::kSimForwardParamsFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ProjectInfo::ProjectInfo()
    : ::google::protobuf::Message(), _internal_metadata_(nullptr)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:pb.ProjectInfo)
}
ProjectInfo::ProjectInfo(const ProjectInfo &from)
    : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      halflifecurvedatalist_(from.halflifecurvedatalist_)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_projectbaseinfo())
    {
        projectbaseinfo_ = new ::pb::ProjectBaseInfo(*from.projectbaseinfo_);
    }
    else
    {
        projectbaseinfo_ = nullptr;
    }
    if (from.has_obsystemsetting())
    {
        obsystemsetting_ = new ::pb::ObservationSystemSetting(*from.obsystemsetting_);
    }
    else
    {
        obsystemsetting_ = nullptr;
    }
    if (from.has_datapreprocess())
    {
        datapreprocess_ = new ::pb::DataPreprocessInfo(*from.datapreprocess_);
    }
    else
    {
        datapreprocess_ = nullptr;
    }
    if (from.has_modelingparam())
    {
        modelingparam_ = new ::pb::ModelingParam(*from.modelingparam_);
    }
    else
    {
        modelingparam_ = nullptr;
    }
    if (from.has_inversionprocessresult())
    {
        inversionprocessresult_ = new ::pb::Data3d(*from.inversionprocessresult_);
    }
    else
    {
        inversionprocessresult_ = nullptr;
    }
    if (from.has_simforwardparams())
    {
        simforwardparams_ = new ::pb::ForwardModelingParaSetting(*from.simforwardparams_);
    }
    else
    {
        simforwardparams_ = nullptr;
    }
    // @@protoc_insertion_point(copy_constructor:pb.ProjectInfo)
}

void ProjectInfo::SharedCtor()
{
    ::google::protobuf::internal::InitSCC(
        &scc_info_ProjectInfo_Project_2epb.base);
    ::memset(&projectbaseinfo_, 0, static_cast<size_t>(
                                       reinterpret_cast<char *>(&simforwardparams_) -
                                       reinterpret_cast<char *>(&projectbaseinfo_)) +
                                       sizeof(simforwardparams_));
}

ProjectInfo::~ProjectInfo()
{
    // @@protoc_insertion_point(destructor:pb.ProjectInfo)
    SharedDtor();
}

void ProjectInfo::SharedDtor()
{
    if (this != internal_default_instance())
        delete projectbaseinfo_;
    if (this != internal_default_instance())
        delete obsystemsetting_;
    if (this != internal_default_instance())
        delete datapreprocess_;
    if (this != internal_default_instance())
        delete modelingparam_;
    if (this != internal_default_instance())
        delete inversionprocessresult_;
    if (this != internal_default_instance())
        delete simforwardparams_;
}

void ProjectInfo::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const ProjectInfo &ProjectInfo::default_instance()
{
    ::google::protobuf::internal::InitSCC(&::scc_info_ProjectInfo_Project_2epb.base);
    return *internal_default_instance();
}

void ProjectInfo::Clear()
{
    // @@protoc_insertion_point(message_clear_start:pb.ProjectInfo)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    halflifecurvedatalist_.Clear();
    if (GetArenaNoVirtual() == nullptr && projectbaseinfo_ != nullptr)
    {
        delete projectbaseinfo_;
    }
    projectbaseinfo_ = nullptr;
    if (GetArenaNoVirtual() == nullptr && obsystemsetting_ != nullptr)
    {
        delete obsystemsetting_;
    }
    obsystemsetting_ = nullptr;
    if (GetArenaNoVirtual() == nullptr && datapreprocess_ != nullptr)
    {
        delete datapreprocess_;
    }
    datapreprocess_ = nullptr;
    if (GetArenaNoVirtual() == nullptr && modelingparam_ != nullptr)
    {
        delete modelingparam_;
    }
    modelingparam_ = nullptr;
    if (GetArenaNoVirtual() == nullptr && inversionprocessresult_ != nullptr)
    {
        delete inversionprocessresult_;
    }
    inversionprocessresult_ = nullptr;
    if (GetArenaNoVirtual() == nullptr && simforwardparams_ != nullptr)
    {
        delete simforwardparams_;
    }
    simforwardparams_ = nullptr;
    _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char *ProjectInfo::_InternalParse(const char *begin, const char *end, void *object,
                                        ::google::protobuf::internal::ParseContext *ctx)
{
    auto msg = static_cast<ProjectInfo *>(object);
    ::google::protobuf::int32 size;
    (void)size;
    int depth;
    (void)depth;
    ::google::protobuf::uint32 tag;
    ::google::protobuf::internal::ParseFunc parser_till_end;
    (void)parser_till_end;
    auto ptr = begin;
    while (ptr < end)
    {
        ptr = ::google::protobuf::io::Parse32(ptr, &tag);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        switch (tag >> 3)
        {
        // .pb.ProjectBaseInfo projectBaseInfo = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 10)
                goto handle_unusual;
            ptr = ::google::protobuf::io::ReadSize(ptr, &size);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            parser_till_end = ::pb::ProjectBaseInfo::_InternalParse;
            object = msg->mutable_projectbaseinfo();
            if (size > end - ptr)
                goto len_delim_till_end;
            ptr += size;
            GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
                {parser_till_end, object}, ptr - size, ptr));
            break;
        }
        // .pb.ObservationSystemSetting obSystemSetting = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 18)
                goto handle_unusual;
            ptr = ::google::protobuf::io::ReadSize(ptr, &size);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            parser_till_end = ::pb::ObservationSystemSetting::_InternalParse;
            object = msg->mutable_obsystemsetting();
            if (size > end - ptr)
                goto len_delim_till_end;
            ptr += size;
            GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
                {parser_till_end, object}, ptr - size, ptr));
            break;
        }
        // .pb.DataPreprocessInfo dataPreprocess = 3;
        case 3:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 26)
                goto handle_unusual;
            ptr = ::google::protobuf::io::ReadSize(ptr, &size);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            parser_till_end = ::pb::DataPreprocessInfo::_InternalParse;
            object = msg->mutable_datapreprocess();
            if (size > end - ptr)
                goto len_delim_till_end;
            ptr += size;
            GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
                {parser_till_end, object}, ptr - size, ptr));
            break;
        }
        // .pb.ModelingParam modelingParam = 4;
        case 4:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 34)
                goto handle_unusual;
            ptr = ::google::protobuf::io::ReadSize(ptr, &size);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            parser_till_end = ::pb::ModelingParam::_InternalParse;
            object = msg->mutable_modelingparam();
            if (size > end - ptr)
                goto len_delim_till_end;
            ptr += size;
            GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
                {parser_till_end, object}, ptr - size, ptr));
            break;
        }
        // .pb.Data3d inversionProcessResult = 5;
        case 5:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 42)
                goto handle_unusual;
            ptr = ::google::protobuf::io::ReadSize(ptr, &size);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            parser_till_end = ::pb::Data3d::_InternalParse;
            object = msg->mutable_inversionprocessresult();
            if (size > end - ptr)
                goto len_delim_till_end;
            ptr += size;
            GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
                {parser_till_end, object}, ptr - size, ptr));
            break;
        }
        // repeated .pb.Vec2d halfLifeCurveDataList = 6;
        case 6:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 50)
                goto handle_unusual;
            do
            {
                ptr = ::google::protobuf::io::ReadSize(ptr, &size);
                GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
                parser_till_end = ::pb::Vec2d::_InternalParse;
                object = msg->add_halflifecurvedatalist();
                if (size > end - ptr)
                    goto len_delim_till_end;
                ptr += size;
                GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
                    {parser_till_end, object}, ptr - size, ptr));
                if (ptr >= end)
                    break;
            } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
            break;
        }
        // .pb.ForwardModelingParaSetting simForwardParams = 7;
        case 7:
        {
            if (static_cast<::google::protobuf::uint8>(tag) != 58)
                goto handle_unusual;
            ptr = ::google::protobuf::io::ReadSize(ptr, &size);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            parser_till_end = ::pb::ForwardModelingParaSetting::_InternalParse;
            object = msg->mutable_simforwardparams();
            if (size > end - ptr)
                goto len_delim_till_end;
            ptr += size;
            GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
                {parser_till_end, object}, ptr - size, ptr));
            break;
        }
        default:
        {
        handle_unusual:
            if ((tag & 7) == 4 || tag == 0)
            {
                ctx->EndGroup(tag);
                return ptr;
            }
            auto res = UnknownFieldParse(tag, {_InternalParse, msg},
                                         ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
            ptr = res.first;
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
            if (res.second)
                return ptr;
        }
        } // switch
    }     // while
    return ptr;
len_delim_till_end:
    return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
}
#else // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProjectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input)
{
#define DO_(EXPRESSION)                     \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:pb.ProjectInfo)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // .pb.ProjectBaseInfo projectBaseInfo = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (10 & 0xFF))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                    input, mutable_projectbaseinfo()));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // .pb.ObservationSystemSetting obSystemSetting = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (18 & 0xFF))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                    input, mutable_obsystemsetting()));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // .pb.DataPreprocessInfo dataPreprocess = 3;
        case 3:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (26 & 0xFF))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                    input, mutable_datapreprocess()));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // .pb.ModelingParam modelingParam = 4;
        case 4:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (34 & 0xFF))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                    input, mutable_modelingparam()));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // .pb.Data3d inversionProcessResult = 5;
        case 5:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (42 & 0xFF))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                    input, mutable_inversionprocessresult()));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // repeated .pb.Vec2d halfLifeCurveDataList = 6;
        case 6:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (50 & 0xFF))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                    input, add_halflifecurvedatalist()));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // .pb.ForwardModelingParaSetting simForwardParams = 7;
        case 7:
        {
            if (static_cast<::google::protobuf::uint8>(tag) == (58 & 0xFF))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                    input, mutable_simforwardparams()));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        default:
        {
        handle_unusual:
            if (tag == 0)
            {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                input, tag, _internal_metadata_.mutable_unknown_fields()));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:pb.ProjectInfo)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:pb.ProjectInfo)
    return false;
#undef DO_
}
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProjectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const
{
    // @@protoc_insertion_point(serialize_start:pb.ProjectInfo)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // .pb.ProjectBaseInfo projectBaseInfo = 1;
    if (this->has_projectbaseinfo())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, HasBitSetters::projectbaseinfo(this), output);
    }

    // .pb.ObservationSystemSetting obSystemSetting = 2;
    if (this->has_obsystemsetting())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, HasBitSetters::obsystemsetting(this), output);
    }

    // .pb.DataPreprocessInfo dataPreprocess = 3;
    if (this->has_datapreprocess())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, HasBitSetters::datapreprocess(this), output);
    }

    // .pb.ModelingParam modelingParam = 4;
    if (this->has_modelingparam())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, HasBitSetters::modelingparam(this), output);
    }

    // .pb.Data3d inversionProcessResult = 5;
    if (this->has_inversionprocessresult())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, HasBitSetters::inversionprocessresult(this), output);
    }

    // repeated .pb.Vec2d halfLifeCurveDataList = 6;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->halflifecurvedatalist_size());
         i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6,
            this->halflifecurvedatalist(static_cast<int>(i)),
            output);
    }

    // .pb.ForwardModelingParaSetting simForwardParams = 7;
    if (this->has_simforwardparams())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, HasBitSetters::simforwardparams(this), output);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:pb.ProjectInfo)
}

::google::protobuf::uint8 *ProjectInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const
{
    // @@protoc_insertion_point(serialize_to_array_start:pb.ProjectInfo)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // .pb.ProjectBaseInfo projectBaseInfo = 1;
    if (this->has_projectbaseinfo())
    {
        target = ::google::protobuf::internal::WireFormatLite::
            InternalWriteMessageToArray(
                1, HasBitSetters::projectbaseinfo(this), target);
    }

    // .pb.ObservationSystemSetting obSystemSetting = 2;
    if (this->has_obsystemsetting())
    {
        target = ::google::protobuf::internal::WireFormatLite::
            InternalWriteMessageToArray(
                2, HasBitSetters::obsystemsetting(this), target);
    }

    // .pb.DataPreprocessInfo dataPreprocess = 3;
    if (this->has_datapreprocess())
    {
        target = ::google::protobuf::internal::WireFormatLite::
            InternalWriteMessageToArray(
                3, HasBitSetters::datapreprocess(this), target);
    }

    // .pb.ModelingParam modelingParam = 4;
    if (this->has_modelingparam())
    {
        target = ::google::protobuf::internal::WireFormatLite::
            InternalWriteMessageToArray(
                4, HasBitSetters::modelingparam(this), target);
    }

    // .pb.Data3d inversionProcessResult = 5;
    if (this->has_inversionprocessresult())
    {
        target = ::google::protobuf::internal::WireFormatLite::
            InternalWriteMessageToArray(
                5, HasBitSetters::inversionprocessresult(this), target);
    }

    // repeated .pb.Vec2d halfLifeCurveDataList = 6;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->halflifecurvedatalist_size());
         i < n; i++)
    {
        target = ::google::protobuf::internal::WireFormatLite::
            InternalWriteMessageToArray(
                6, this->halflifecurvedatalist(static_cast<int>(i)), target);
    }

    // .pb.ForwardModelingParaSetting simForwardParams = 7;
    if (this->has_simforwardparams())
    {
        target = ::google::protobuf::internal::WireFormatLite::
            InternalWriteMessageToArray(
                7, HasBitSetters::simforwardparams(this), target);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:pb.ProjectInfo)
    return target;
}

size_t ProjectInfo::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:pb.ProjectInfo)
    size_t total_size = 0;

    if (_internal_metadata_.have_unknown_fields())
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                _internal_metadata_.unknown_fields());
    }
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // repeated .pb.Vec2d halfLifeCurveDataList = 6;
    {
        unsigned int count = static_cast<unsigned int>(this->halflifecurvedatalist_size());
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++)
        {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSize(
                    this->halflifecurvedatalist(static_cast<int>(i)));
        }
    }

    // .pb.ProjectBaseInfo projectBaseInfo = 1;
    if (this->has_projectbaseinfo())
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *projectbaseinfo_);
    }

    // .pb.ObservationSystemSetting obSystemSetting = 2;
    if (this->has_obsystemsetting())
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *obsystemsetting_);
    }

    // .pb.DataPreprocessInfo dataPreprocess = 3;
    if (this->has_datapreprocess())
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *datapreprocess_);
    }

    // .pb.ModelingParam modelingParam = 4;
    if (this->has_modelingparam())
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *modelingparam_);
    }

    // .pb.Data3d inversionProcessResult = 5;
    if (this->has_inversionprocessresult())
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *inversionprocessresult_);
    }

    // .pb.ForwardModelingParaSetting simForwardParams = 7;
    if (this->has_simforwardparams())
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *simforwardparams_);
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void ProjectInfo::MergeFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:pb.ProjectInfo)
    GOOGLE_DCHECK_NE(&from, this);
    const ProjectInfo *source =
        ::google::protobuf::DynamicCastToGenerated<ProjectInfo>(
            &from);
    if (source == nullptr)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ProjectInfo)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ProjectInfo)
        MergeFrom(*source);
    }
}

void ProjectInfo::MergeFrom(const ProjectInfo &from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:pb.ProjectInfo)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    halflifecurvedatalist_.MergeFrom(from.halflifecurvedatalist_);
    if (from.has_projectbaseinfo())
    {
        mutable_projectbaseinfo()->::pb::ProjectBaseInfo::MergeFrom(from.projectbaseinfo());
    }
    if (from.has_obsystemsetting())
    {
        mutable_obsystemsetting()->::pb::ObservationSystemSetting::MergeFrom(from.obsystemsetting());
    }
    if (from.has_datapreprocess())
    {
        mutable_datapreprocess()->::pb::DataPreprocessInfo::MergeFrom(from.datapreprocess());
    }
    if (from.has_modelingparam())
    {
        mutable_modelingparam()->::pb::ModelingParam::MergeFrom(from.modelingparam());
    }
    if (from.has_inversionprocessresult())
    {
        mutable_inversionprocessresult()->::pb::Data3d::MergeFrom(from.inversionprocessresult());
    }
    if (from.has_simforwardparams())
    {
        mutable_simforwardparams()->::pb::ForwardModelingParaSetting::MergeFrom(from.simforwardparams());
    }
}

void ProjectInfo::CopyFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:pb.ProjectInfo)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void ProjectInfo::CopyFrom(const ProjectInfo &from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:pb.ProjectInfo)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ProjectInfo::IsInitialized() const
{
    return true;
}

void ProjectInfo::Swap(ProjectInfo *other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ProjectInfo::InternalSwap(ProjectInfo *other)
{
    using std::swap;
    _internal_metadata_.Swap(&other->_internal_metadata_);
    CastToBase(&halflifecurvedatalist_)->InternalSwap(CastToBase(&other->halflifecurvedatalist_));
    swap(projectbaseinfo_, other->projectbaseinfo_);
    swap(obsystemsetting_, other->obsystemsetting_);
    swap(datapreprocess_, other->datapreprocess_);
    swap(modelingparam_, other->modelingparam_);
    swap(inversionprocessresult_, other->inversionprocessresult_);
    swap(simforwardparams_, other->simforwardparams_);
}

::google::protobuf::Metadata ProjectInfo::GetMetadata() const
{
    ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Project_2epb);
    return ::file_level_metadata_Project_2epb[kIndexInFileMessages];
}

// @@protoc_insertion_point(namespace_scope)
} // namespace pb
namespace google
{
namespace protobuf
{
template <>
PROTOBUF_NOINLINE::pb::Vec3d *Arena::CreateMaybeMessage<::pb::Vec3d>(Arena *arena)
{
    return Arena::CreateInternal<::pb::Vec3d>(arena);
}
template <>
PROTOBUF_NOINLINE::pb::Vec2d *Arena::CreateMaybeMessage<::pb::Vec2d>(Arena *arena)
{
    return Arena::CreateInternal<::pb::Vec2d>(arena);
}
template <>
PROTOBUF_NOINLINE::pb::Data1d *Arena::CreateMaybeMessage<::pb::Data1d>(Arena *arena)
{
    return Arena::CreateInternal<::pb::Data1d>(arena);
}
template <>
PROTOBUF_NOINLINE::pb::Data3d *Arena::CreateMaybeMessage<::pb::Data3d>(Arena *arena)
{
    return Arena::CreateInternal<::pb::Data3d>(arena);
}
template <>
PROTOBUF_NOINLINE::pb::ObservationSystemSetting *Arena::CreateMaybeMessage<::pb::ObservationSystemSetting>(Arena *arena)
{
    return Arena::CreateInternal<::pb::ObservationSystemSetting>(arena);
}
template <>
PROTOBUF_NOINLINE::pb::ForwardModelingParaSetting *Arena::CreateMaybeMessage<::pb::ForwardModelingParaSetting>(Arena *arena)
{
    return Arena::CreateInternal<::pb::ForwardModelingParaSetting>(arena);
}
template <>
PROTOBUF_NOINLINE::pb::DataPreprocessInfo *Arena::CreateMaybeMessage<::pb::DataPreprocessInfo>(Arena *arena)
{
    return Arena::CreateInternal<::pb::DataPreprocessInfo>(arena);
}
template <>
PROTOBUF_NOINLINE::pb::ModelingParam *Arena::CreateMaybeMessage<::pb::ModelingParam>(Arena *arena)
{
    return Arena::CreateInternal<::pb::ModelingParam>(arena);
}
template <>
PROTOBUF_NOINLINE::pb::ProjectBaseInfo *Arena::CreateMaybeMessage<::pb::ProjectBaseInfo>(Arena *arena)
{
    return Arena::CreateInternal<::pb::ProjectBaseInfo>(arena);
}
template <>
PROTOBUF_NOINLINE::pb::ProjectInfo *Arena::CreateMaybeMessage<::pb::ProjectInfo>(Arena *arena)
{
    return Arena::CreateInternal<::pb::ProjectInfo>(arena);
}
} // namespace protobuf
} // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
